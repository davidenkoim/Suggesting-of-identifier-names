// Path id: 30
// Path to file: C:\Users\Igor\IdeaProjects\SLP-Core-0.3\java-projects\ant-master\src\main\org\apache\tools\ant\ArgumentProcessorRegistry.java
// Number of identifiers: 87	Accuracy: 47.13%	MRR: 49.90%
// True 	Rank of true in predictions : [(predicted token, probability of a token), ...]

/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
package org.apache.tools.ant;
// ant                  0	: [('ant', 0.9196168737682044), ('zip', 0.02056122010503266), ('junit', 0.0008937662553538011), ('types', 0.0007477505124209502), ('length', 0.0006859156270672368), ('equals', 0.0005333779647234146), ('append', 0.00048786027519558746), ('add', 0.0004659513823416002), ('getProperty', 0.0004415947871354229), ('resources', 0.0001562418914269175)]

import java.io.BufferedReader;
// java                 0	: [('java', 0.6106928794834621), ('junit', 0.001001785186042179), ('jdepend', 1.747816349338423e-05), ('resources', 4.943235527034611e-06), ('srcDir', 3.643228225769114e-06), ('separator', 3.5636359420181653e-06), ('expected', 3.4309821357665842e-06), ('values', 2.9268976720105755e-06), ('os', 2.6085285370067802e-06)]
import java.io.IOException;
// java                 0	: [('java', 0.9381928794834622), ('junit', 0.001001785186042179), ('jdepend', 1.747816349338423e-05), ('resources', 4.943235527034611e-06), ('srcDir', 3.643228225769114e-06), ('separator', 3.5636359420181653e-06), ('expected', 3.4309821357665842e-06), ('values', 2.9268976720105755e-06), ('os', 2.6085285370067802e-06)]
import java.io.InputStream;
// java                 0	: [('java', 0.9361636587042415), ('junit', 0.001001785186042179), ('jdepend', 1.747816349338423e-05), ('resources', 4.943235527034611e-06), ('srcDir', 3.643228225769114e-06), ('separator', 3.5636359420181653e-06), ('expected', 3.4309821357665842e-06), ('values', 2.9268976720105755e-06), ('os', 2.6085285370067802e-06)]
import java.io.InputStreamReader;
// java                 0	: [('java', 0.9371245034150861), ('junit', 0.001001785186042179), ('jdepend', 1.747816349338423e-05), ('resources', 4.943235527034611e-06), ('srcDir', 3.643228225769114e-06), ('separator', 3.5636359420181653e-06), ('expected', 3.4309821357665842e-06), ('values', 2.9268976720105755e-06), ('os', 2.6085285370067802e-06)]
import java.net.URL;
// java                 0	: [('java', 0.9381928794834622), ('junit', 0.001001785186042179), ('jdepend', 1.747816349338423e-05), ('resources', 4.943235527034611e-06), ('srcDir', 3.643228225769114e-06), ('separator', 3.5636359420181653e-06), ('expected', 3.4309821357665842e-06), ('values', 2.9268976720105755e-06), ('os', 2.6085285370067802e-06)]
// URL                  0	: [('URL', 0.5446273619868607), ('ftp', 0.03971014812778862), ('ant', 0.002755723184061174), ('telnet', 0.0026479062222698182), ('junit', 0.0008937662553538011), ('types', 0.0007477505124209502), ('length', 0.0006859156270672368), ('equals', 0.0005333779647234146), ('append', 0.00048786027519558746), ('add', 0.0004659513823416002)]
import java.net.URLConnection;
// java                 0	: [('java', 0.7689345062777205), ('junit', 0.024526506079184125), ('jdepend', 1.747816349338423e-05), ('resources', 4.943235527034611e-06), ('srcDir', 3.643228225769114e-06), ('separator', 3.5636359420181653e-06), ('expected', 3.4309821357665842e-06), ('values', 2.9268976720105755e-06), ('os', 2.6085285370067802e-06)]
import java.nio.charset.StandardCharsets;
// java                 0	: [('java', 0.9381928794834622), ('junit', 0.001001785186042179), ('jdepend', 1.747816349338423e-05), ('resources', 4.943235527034611e-06), ('srcDir', 3.643228225769114e-06), ('separator', 3.5636359420181653e-06), ('expected', 3.4309821357665842e-06), ('values', 2.9268976720105755e-06), ('os', 2.6085285370067802e-06)]
// charset              1	: [('file', 0.6896502946052327), ('charset', 0.21040444168591435), ('ant', 0.002755723184061174), ('junit', 0.0008937662553538011), ('types', 0.0007477505124209502), ('length', 0.0006859156270672368), ('equals', 0.0005333779647234146), ('append', 0.00048786027519558746), ('add', 0.0004659513823416002), ('getProperty', 0.0004415947871354229)]
import java.util.ArrayList;
// java                 0	: [('java', 0.9340262128167955), ('junit', 0.001001785186042179), ('jdepend', 1.747816349338423e-05), ('resources', 4.943235527034611e-06), ('srcDir', 3.643228225769114e-06), ('separator', 3.5636359420181653e-06), ('expected', 3.4309821357665842e-06), ('values', 2.9268976720105755e-06), ('os', 2.6085285370067802e-06)]
import java.util.Collections;
// java                 0	: [('java', 0.9381928794834622), ('junit', 0.001001785186042179), ('jdepend', 1.747816349338423e-05), ('resources', 4.943235527034611e-06), ('srcDir', 3.643228225769114e-06), ('separator', 3.5636359420181653e-06), ('expected', 3.4309821357665842e-06), ('values', 2.9268976720105755e-06), ('os', 2.6085285370067802e-06)]
import java.util.List;
// java                 0	: [('java', 0.9381928794834622), ('junit', 0.001001785186042179), ('jdepend', 1.747816349338423e-05), ('resources', 4.943235527034611e-06), ('srcDir', 3.643228225769114e-06), ('separator', 3.5636359420181653e-06), ('expected', 3.4309821357665842e-06), ('values', 2.9268976720105755e-06), ('os', 2.6085285370067802e-06)]

import org.apache.tools.ant.util.LoaderUtils;
// ant                  0	: [('ant', 0.9196168737682044), ('zip', 0.02056122010503266), ('junit', 0.0008937662553538011), ('types', 0.0007477505124209502), ('length', 0.0006859156270672368), ('equals', 0.0005333779647234146), ('append', 0.00048786027519558746), ('add', 0.0004659513823416002), ('getProperty', 0.0004415947871354229), ('resources', 0.0001562418914269175)]

/**
 * The global registry for {@link ArgumentProcessor}s.
 * <p>
 * An {@link ArgumentProcessor} implementation can be registered via the system
 * property <code>org.apache.tools.ant.ArgumentProcessor</code>, or via a JDK1.3
 * 'service', by putting the fully qualified name of the implementation into the
 * file <code>META-INF/services/org.apache.tools.ant.ArgumentProcessor</code>
 * <p>
 * Use the system property <code>ant.argument-processor.debug</code> to enable
 * the print of debug log.
 *
 * @since 1.9
 */
public class ArgumentProcessorRegistry {

    private static final String DEBUG_ARGUMENT_PROCESSOR_REPOSITORY = "ant.argument-processor-repo.debug";
// DEBUG_ARGUMENT_PROCESSOR_REPOSITORY No	: [('message', 0.015732686069991487), ('MILLISECOND', 0.013812994156737082), ('NONE', 0.013669695201273388), ('LINES_KEY', 0.013669668670512137), ('OUTPUT_FILE', 0.013669668670512137), ('ONE_NESTED_MESSAGE', 0.013669642139750887), ('CONTAINS_KEY', 0.006978283466873878), ('tempFile', 0.006835674311202692), ('IF_NAMESPACE', 0.006835196757500187), ('REGEXP_KEY', 0.006835170226738936)]

    // The message log level is not accessible here because everything
    // is instantiated statically
    private static final boolean DEBUG = "true".equals(System.getProperty(DEBUG_ARGUMENT_PROCESSOR_REPOSITORY));
// DEBUG                0	: [('DEBUG', 0.09499952608989116), ('ON_DOS', 0.09499949955912991), ('ON_NETWARE', 0.09499947302836867), ('IS_AIX', 0.09499941996684616), ('IS_NETWARE', 0.09499941996684616), ('ON_WINDOWS', 0.0949993934360849), ('ON_WIN9X', 0.0949993934360849), ('IS_ATLEAST_JAVA9', 0.09499936690532365), ('b', 0.008343321564770963), ('verbose', 0.004401428873461483)]
// equals               0	: [('equals', 0.8933905208218662), ('ant', 0.002755723184061174), ('junit', 0.0008937662553538011), ('types', 0.0007477505124209502), ('length', 0.0006859156270672368), ('append', 0.00048786027519558746), ('add', 0.0004659513823416002), ('setValue', 0.0004481339415944323), ('getProperty', 0.0004415947871354229), ('resources', 0.0001562418914269175)]
// getProperty          0	: [('getProperty', 0.8414715445871864), ('out', 0.04371663335323923), ('err', 0.028546864615947066), ('in', 0.007645091266425081), ('ant', 0.002755723184061174), ('junit', 0.0008937662553538011), ('types', 0.0007477505124209502), ('length', 0.0006859156270672368), ('gc', 0.00029351252641301946), ('console', 9.943967829228221e-05)]
// DEBUG_ARGUMENT_PROCESSOR_REPOSITORY No	: [('JAVA_CLASS_PATH', 0.013312282153493317), ('USER_HOMEDIR', 0.013311858268693263), ('DEBUG_PROJECT_HELPER_REPOSITORY', 0.013311778676409513), ('key', 0.007355457556541312), ('name', 0.005703877007904785), ('property', 0.0037430467537375688), ('ANTHOME_PROPERTY', 0.0022017010502272598), ('ANTLIBDIR_PROPERTY', 0.0022011975731434565), ('FILE_NAME_KEY', 0.002200720626820903), ('buildRule', 0.0003094701218874333)]

    private static final String SERVICE_ID = "META-INF/services/org.apache.tools.ant.ArgumentProcessor";
// SERVICE_ID           No	: [('DEFAULT_EXTENSION', 0.0067431266495529855), ('TIMEOUT_MESSAGE', 0.005375878117651041), ('SECOND', 0.004639046772532597), ('NEGATE_KEY', 0.004638807995681344), ('ATTR_NAME', 0.004499203067452246), ('ATTR_VALUE', 0.004499043882884745), ('ENTITY_BEAN', 0.004495721286307652), ('XML_DESCRIPTOR_PATH', 0.004495721286307652), ('SKIP_KEY', 0.004495694755546402), ('CS_KEY', 0.004495694755546402)]

    private static ArgumentProcessorRegistry instance = new ArgumentProcessorRegistry();
// instance             No	: [('processorRegistry', 0.5000107485274518), ('resources', 7.909176843255377e-05), ('junit', 7.272438573247786e-05), ('srcDir', 5.8291651612305815e-05), ('separator', 5.7018175072290644e-05), ('expected', 5.489571417226535e-05), ('values', 4.683036275216921e-05), ('os', 4.1736456592108484e-05), ('token', 3.791602697206295e-05), ('entries', 3.749153479205789e-05)]

    private List<ArgumentProcessor> processors = new ArrayList<>();
// processors           No	: [('c', 0.010123429534166664), ('files', 0.008846747179430502), ('iterator', 0.007562848457634251), ('clazz', 0.0067442712882771995), ('stk', 0.006159416125589754), ('list', 0.004951077011834406), ('result', 0.004675078971677469), ('filterChains', 0.0045108004980155105), ('map', 0.004340752318346659), ('entry', 0.004160940818537692)]

    public static ArgumentProcessorRegistry getInstance() {
        return instance;
// instance             0	: [('instance', 0.2505586156765752), ('DEFAULT', 0.12527637829366162), ('INSTANCE', 0.12527635176290036), ('name', 0.01545619294281513), ('value', 0.009155816346599515), ('file', 0.005553406670667001), ('project', 0.005414664814241469), ('mComment', 0.003033443400620373), ('VALUES', 0.003033416869859123), ('linkFlag', 0.00276455960051594)]
    }

    private ArgumentProcessorRegistry() {
        collectArgumentProcessors();
    }

    public List<ArgumentProcessor> getProcessors() {
        return processors;
// processors           No	: [('name', 0.03091238588563026), ('value', 0.01831163269319903), ('file', 0.011106813341334003), ('project', 0.010829329628482938), ('mComment', 0.006066886801240746), ('VALUES', 0.006066833739718246), ('linkFlag', 0.00552911920103188), ('classpath', 0.005234369167512443), ('pattern', 0.005173152057716681), ('fileset', 0.005157596421723771)]
    }

    private void collectArgumentProcessors() {
        try {
            ClassLoader classLoader = LoaderUtils.getContextClassLoader();
// classLoader          1	: [('cl', 0.8529119323686115), ('classLoader', 0.06021183572649399), ('loader', 0.00857290562724194), ('l', 0.0041449774585080685), ('al', 0.004138344768195489), ('orig', 0.003917005400895484), ('ret', 0.003696806856329242), ('context', 0.0036957456258792294), ('resources', 4.943235527034611e-06), ('junit', 4.5452741082798665e-06)]
            if (classLoader != null) {
// classLoader          No	: [('t', 0.0124326061945085), ('task', 0.01161779270583427), ('c', 0.011220156600477814), ('params', 0.010643212305006533), ('ch', 0.010397900638993306), ('name', 0.009959577650586296), ('isUnixStyle', 0.009659028896609656), ('classpath', 0.009422557197807937), ('s', 0.009105783679277838), ('parent', 0.009017386293159997)]
                for (URL resource : Collections.list(classLoader.getResources(SERVICE_ID))) {
// URL                  0	: [('URL', 0.503540699023764), ('i', 0.0013468929471484067), ('line', 0.0007327548275303489), ('buildRule', 0.0003094701218874333), ('name', 0.0003000194849961243), ('project', 0.00023845290888661715), ('file', 0.0002070601176813914), ('p', 0.00019660881988862463), ('pos', 0.00014267589011639003), ('j', 0.00013806743359821903)]
// resource             0	: [('resource', 0.4216355414629279), ('dirURL', 0.4216320924639654), ('jar', 0.046632967979086615), ('url', 0.01401508419158974), ('u', 0.010716416921478641), ('base', 0.010561398083454267), ('buildFile', 0.004966221720136199), ('baseURL', 0.0011004486293465189), ('resources', 4.943235527034611e-06), ('junit', 4.5452741082798665e-06)]
// list                 0	: [('list', 0.8663983421859992), ('enumeration', 0.02663694608779503), ('ant', 0.002755723184061174), ('sort', 0.0023247034240260075), ('junit', 0.0008937662553538011), ('types', 0.0007477505124209502), ('length', 0.0006859156270672368), ('EMPTY_LIST', 0.0005799482219646223), ('equals', 0.0005333779647234146), ('append', 0.00048786027519558746)]
// classLoader          6	: [('ih', 0.11784145393667389), ('section', 0.04503475707587312), ('target', 0.03646028033353559), ('other', 0.03644459112951408), ('loader', 0.036419046452046355), ('ue', 0.036414592321056066), ('classLoader', 0.03641409005873217), ('zf', 0.03641406292059097), ('wrapper', 0.036409107742036685), ('curtarget', 0.03640568891811511)]
// SERVICE_ID           No	: [('resource', 0.27190967187733295), ('TEST_RESOURCE', 0.0656276591605397), ('name', 0.04405001948499613), ('projectResourceName', 0.02187620179081079), ('buildRule', 0.0003094701218874333), ('project', 0.00023845290888661715), ('file', 0.0002070601176813914), ('p', 0.00019660881988862463), ('s', 0.00014639619483434757), ('resources', 1.9728571526179923e-05)]
                    URLConnection conn = resource.openConnection();
// conn                 0	: [('conn', 0.9506590706042716), ('connection', 0.003290331182505012), ('c', 0.001653978060954849), ('resources', 4.943235527034611e-06), ('junit', 4.5452741082798665e-06), ('srcDir', 3.643228225769114e-06), ('separator', 3.5636359420181653e-06), ('expected', 3.4309821357665842e-06), ('values', 2.9268976720105755e-06), ('os', 2.6085285370067802e-06)]
// resource             0	: [('resource', 0.577128693966168), ('url', 0.19380217063575608), ('antlibUrl', 0.07708611884382882), ('u', 0.006280635399039797), ('buildRule', 0.00034438724736734165), ('b', 0.0002777114765400536), ('name', 0.00027322645528700233), ('value', 0.00025461932762982256), ('p', 0.00022508020373576473), ('file', 0.00021143333648108325)]
                    conn.setUseCaches(false);
// conn                 0	: [('conn', 0.7001520427624524), ('buildRule', 0.003064562374568601), ('project', 0.002000664277209001), ('compareFiles', 0.0016812295665855272), ('log', 0.0016188828239629039), ('out', 0.0015612691496752653), ('i', 0.0013794675821436246), ('ds', 0.001344660215397142), ('p', 0.001130476244786433), ('fs', 0.0007952267558646007)]
                    ArgumentProcessor processor = getProcessorByService(conn.getInputStream());
// processor            0	: [('processor', 0.5000154179414318), ('resources', 7.909176843255377e-05), ('junit', 7.272438573247786e-05), ('srcDir', 5.8291651612305815e-05), ('separator', 5.7018175072290644e-05), ('expected', 5.489571417226535e-05), ('values', 4.683036275216921e-05), ('os', 4.1736456592108484e-05), ('token', 3.791602697206295e-05), ('entries', 3.749153479205789e-05)]
// conn                 No	: [('buildRule', 0.004951521950198933), ('name', 0.004800311759937989), ('project', 0.0038152465421858743), ('file', 0.0033129618829022623), ('p', 0.003145741118217994), ('s', 0.002342339117349561), ('value', 0.002241040975596222), ('f', 0.0022282770559583446), ('e', 0.0021735564370546595), ('r', 0.00199754767162043)]
                    registerArgumentProcessor(processor);
// processor            No	: [('buildRule', 0.004951521950198933), ('name', 0.004800311759937989), ('project', 0.0038152465421858743), ('file', 0.0033129618829022623), ('p', 0.003145741118217994), ('s', 0.002342339117349561), ('value', 0.002241040975596222), ('f', 0.0022282770559583446), ('e', 0.0021735564370546595), ('r', 0.00199754767162043)]
                }
            }

            InputStream systemResource = ClassLoader.getSystemResourceAsStream(SERVICE_ID);
// systemResource       1	: [('in', 0.4545099462441778), ('systemResource', 0.4500925835476716), ('is', 0.031162368201789897), ('inputStream', 0.013144584751131916), ('input', 0.0009224955676720895), ('fis', 0.0009205588221008164), ('stream', 0.0006489623267382187), ('resources', 4.943235527034611e-06), ('junit', 4.5452741082798665e-06), ('srcDir', 3.643228225769114e-06)]
// SERVICE_ID           No	: [('resource', 0.6875346718773329), ('name', 0.1878000194849961), ('buildRule', 0.0003094701218874333), ('project', 0.00023845290888661715), ('file', 0.0002070601176813914), ('p', 0.00019660881988862463), ('s', 0.00014639619483434757), ('value', 0.00014006506097476387), ('f', 0.00013926731599739654), ('resources', 1.9728571526179923e-05)]
            if (systemResource != null) { //NOSONAR
// systemResource       0	: [('systemResource', 0.5001605430795002), ('file', 0.004829318272381942), ('f', 0.004770300641109532), ('c', 0.0046794589260592085), ('task', 0.004350350845369155), ('index', 0.004050102276243036), ('line', 0.003646506398952655), ('o', 0.003573231979181505), ('value', 0.0033752717489832626), ('fp', 0.0028845944825078157)]
                ArgumentProcessor processor = getProcessorByService(systemResource);
// processor            0	: [('processor', 0.5000154179414318), ('resources', 7.909176843255377e-05), ('junit', 7.272438573247786e-05), ('srcDir', 5.8291651612305815e-05), ('separator', 5.7018175072290644e-05), ('expected', 5.489571417226535e-05), ('values', 4.683036275216921e-05), ('os', 4.1736456592108484e-05), ('token', 3.791602697206295e-05), ('entries', 3.749153479205789e-05)]
// systemResource       No	: [('buildRule', 0.004951521950198933), ('name', 0.004800311759937989), ('project', 0.0038152465421858743), ('file', 0.0033129618829022623), ('p', 0.003145741118217994), ('s', 0.002342339117349561), ('value', 0.002241040975596222), ('f', 0.0022282770559583446), ('e', 0.0021735564370546595), ('r', 0.00199754767162043)]
                registerArgumentProcessor(processor);
// processor            No	: [('buildRule', 0.004951521950198933), ('name', 0.004800311759937989), ('project', 0.0038152465421858743), ('file', 0.0033129618829022623), ('p', 0.003145741118217994), ('s', 0.002342339117349561), ('value', 0.002241040975596222), ('f', 0.0022282770559583446), ('e', 0.0021735564370546595), ('r', 0.00199754767162043)]
            }
        } catch (Exception e) {
// e                    0	: [('e', 0.6931992792326278), ('ex', 0.14689154028962137), ('err', 0.04818399428753619), ('t', 0.02714465813437647), ('exc', 0.023439821987654083), ('e2', 0.0065149929138794945), ('x', 0.0036570623431309004), ('resources', 4.943235527034611e-06), ('junit', 4.5452741082798665e-06), ('srcDir', 3.643228225769114e-06)]
            System.err.println("Unable to load ArgumentProcessor from service "
// err                  1	: [('out', 0.5426857021003861), ('err', 0.32342799948399886), ('getProperty', 0.019840486369218948), ('gc', 0.008429116980283645), ('ant', 0.002755723184061174), ('junit', 0.0008937662553538011), ('in', 0.000795776197931931), ('types', 0.0007477505124209502), ('length', 0.0006859156270672368), ('console', 9.943967829228221e-05)]
                    + SERVICE_ID + " (" + e.getClass().getName() + ": "
// SERVICE_ID           No	: [('classname', 0.0795341157437511), ('currRecIdx', 0.062285101089844364), ('type', 0.031510932034024296), ('buildFile', 0.03124373116246576), ('currBlkIdx', 0.03116522545198154), ('currEntry', 0.031148564047963553), ('tempdir', 0.031148484455679797), ('ph', 0.031143257867062558), ('mainClassname', 0.031142753782598804), ('name', 0.023518946135573066)]
// e                    0	: [('e', 0.7198648451738877), ('ioe', 0.04423866305255726), ('lib', 0.04376269878904847), ('name', 0.0013200349409255231), ('file', 0.0010602444661215033), ('i', 0.0005477735886229673), ('value', 0.0005373736448165637), ('f', 0.0004991691767105279), ('resources', 9.886471054069222e-06), ('junit', 9.090548216559733e-06)]
                    + e.getMessage() + ")");
// e                    0	: [('e', 0.3348090195671994), ('attribute', 0.2474351234467107), ('ioe', 0.13324012130560497), ('entry', 0.1237419611155705), ('p', 0.01869682149714562), ('value', 0.014216857554115598), ('exc', 0.009322534147662107), ('name', 0.0006600174704627616), ('file', 0.0005301222330607516), ('resources', 4.943235527034611e-06)]
            if (DEBUG) {
// DEBUG                0	: [('DEBUG', 0.18800339875400207), ('stdout', 0.1254826975423231), ('haltOnFailure', 0.06298906895067097), ('v', 0.06286232405552228), ('haltOnError', 0.06266202819475027), ('file', 0.004829318272381942), ('f', 0.004770300641109532), ('c', 0.0046794589260592085), ('task', 0.004350350845369155), ('index', 0.004050102276243036)]
                e.printStackTrace(System.err); //NOSONAR
// e                    0	: [('e', 0.43760681689194336), ('buildRule', 0.0052549193095553295), ('log', 0.002857216629527125), ('thrown', 0.0013502093883886897), ('cmd', 0.0008909116678047103), ('out', 0.000476327304717882), ('project', 0.0004685494483952769), ('sb', 0.00041962120292493723), ('result', 0.00028863444106700975), ('s', 0.0002810431358403427)]
// err                  0	: [('err', 0.778546864615947), ('getProperty', 0.09147154458718647), ('out', 0.04371663335323923), ('in', 0.007645091266425081), ('ant', 0.002755723184061174), ('junit', 0.0008937662553538011), ('types', 0.0007477505124209502), ('length', 0.0006859156270672368), ('gc', 0.00029351252641301946), ('console', 9.943967829228221e-05)]
            }
        }
    }

    public void registerArgumentProcessor(String helperClassName)
// helperClassName      No	: [('name', 0.05138449847399695), ('value', 0.020787488702434503), ('s', 0.019433001437495174), ('message', 0.01269822043868847), ('msg', 0.011431226927909838), ('target', 0.010874769296890744), ('line', 0.010398670515374206), ('uri', 0.009775901467695467), ('classname', 0.009472466307973972), ('property', 0.008787561503658003)]
            throws BuildException {
        registerArgumentProcessor(getProcessor(helperClassName));
// helperClassName      No	: [('buildRule', 0.004951521950198933), ('name', 0.004800311759937989), ('project', 0.0038152465421858743), ('file', 0.0033129618829022623), ('p', 0.003145741118217994), ('s', 0.002342339117349561), ('value', 0.002241040975596222), ('f', 0.0022282770559583446), ('e', 0.0021735564370546595), ('r', 0.00199754767162043)]
    }

    public void registerArgumentProcessor(
            Class< ? extends ArgumentProcessor> helperClass)
// helperClass          No	: [('c', 0.010123429534166664), ('files', 0.008846747179430502), ('iterator', 0.007562848457634251), ('clazz', 0.0067442712882771995), ('stk', 0.006159416125589754), ('list', 0.004951077011834406), ('result', 0.004675078971677469), ('filterChains', 0.0045108004980155105), ('map', 0.004340752318346659), ('entry', 0.004160940818537692)]
            throws BuildException {
        registerArgumentProcessor(getProcessor(helperClass));
// helperClass          No	: [('buildRule', 0.004951521950198933), ('name', 0.004800311759937989), ('project', 0.0038152465421858743), ('file', 0.0033129618829022623), ('p', 0.003145741118217994), ('s', 0.002342339117349561), ('value', 0.002241040975596222), ('f', 0.0022282770559583446), ('e', 0.0021735564370546595), ('r', 0.00199754767162043)]
    }

    private ArgumentProcessor getProcessor(String helperClassName) {
// helperClassName      No	: [('name', 0.05138449847399695), ('value', 0.020787488702434503), ('s', 0.019433001437495174), ('message', 0.01269822043868847), ('msg', 0.011431226927909838), ('target', 0.010874769296890744), ('line', 0.010398670515374206), ('uri', 0.009775901467695467), ('classname', 0.009472466307973972), ('property', 0.008787561503658003)]
        try {
            @SuppressWarnings("unchecked")
            Class< ? extends ArgumentProcessor> cl = (Class< ? extends ArgumentProcessor>) Class.forName(helperClassName);
// cl                   No	: [('c', 0.010123429534166664), ('files', 0.008846747179430502), ('iterator', 0.007562848457634251), ('clazz', 0.0067442712882771995), ('stk', 0.006159416125589754), ('list', 0.004951077011834406), ('result', 0.004675078971677469), ('filterChains', 0.0045108004980155105), ('map', 0.004340752318346659), ('entry', 0.004160940818537692)]
// helperClassName      No	: [('className', 0.30593859684345764), ('runnerClass', 0.25621226308438616), ('classname', 0.11805930524426834), ('factoryName', 0.012426716063741836), ('junitTest', 0.012425762171096729), ('readerClassName', 0.01242435786289032), ('JUNIT_4_TEST_ADAPTER', 0.01242427827060657), ('analyzerClassName', 0.012423933978090268), ('WLRMIC_CLASSNAME', 0.012423774793522765), ('buildRule', 0.0003094701218874333)]
            return getProcessor(cl);
// cl                   No	: [('buildRule', 0.004951521950198933), ('name', 0.004800311759937989), ('project', 0.0038152465421858743), ('file', 0.0033129618829022623), ('p', 0.003145741118217994), ('s', 0.002342339117349561), ('value', 0.002241040975596222), ('f', 0.0022282770559583446), ('e', 0.0021735564370546595), ('r', 0.00199754767162043)]
        } catch (ClassNotFoundException e) {
// e                    0	: [('e', 0.45892239288750225), ('cnfe', 0.23855392191164118), ('ex', 0.14888155473828787), ('x', 0.02302409862148034), ('cnf3', 0.023022878206462823), ('cnf1', 0.023022878206462823), ('cnf2', 0.023022878206462823), ('resources', 4.943235527034611e-06), ('junit', 4.5452741082798665e-06), ('srcDir', 3.643228225769114e-06)]
            throw new BuildException("Argument processor class "
                    + helperClassName + " was not found", e);
// helperClassName      No	: [('name', 0.0568169366559641), ('commandLine', 0.05136886062589471), ('e', 0.04942351216845873), ('className', 0.020061989264996714), ('src', 0.01942618873752333), ('srcFile', 0.019396341094446316), ('manifestFile', 0.01919547137299783), ('r', 0.017063463923584696), ('dir', 0.015954119706995187), ('ioe', 0.013930383642294777)]
// e                    0	: [('e', 0.030667181916103733), ('j', 0.016436566218187516), ('tmpdir', 0.014351457865978289), ('reader', 0.01242971822248636), ('collectorFile', 0.012281843478339246), ('f', 0.01084835920621363), ('result', 0.010275485664777671), ('files', 0.008932426129445396), ('quiet', 0.008406540545521368), ('ret', 0.006166070724208463)]
        }
    }

    private ArgumentProcessor getProcessor(
            Class< ? extends ArgumentProcessor> processorClass) {
// processorClass       No	: [('c', 0.010123429534166664), ('files', 0.008846747179430502), ('iterator', 0.007562848457634251), ('clazz', 0.0067442712882771995), ('stk', 0.006159416125589754), ('list', 0.004951077011834406), ('result', 0.004675078971677469), ('filterChains', 0.0045108004980155105), ('map', 0.004340752318346659), ('entry', 0.004160940818537692)]
        ArgumentProcessor processor;
// processor            0	: [('processor', 0.5000154179414318), ('resources', 7.909176843255377e-05), ('junit', 7.272438573247786e-05), ('srcDir', 5.8291651612305815e-05), ('separator', 5.7018175072290644e-05), ('expected', 5.489571417226535e-05), ('values', 4.683036275216921e-05), ('os', 4.1736456592108484e-05), ('token', 3.791602697206295e-05), ('entries', 3.749153479205789e-05)]
        try {
            processor = processorClass.getConstructor().newInstance();
// processor            No	: [('buildRule', 0.03485884158689732), ('log', 0.0262159196704966), ('result', 0.01133465681924192), ('testMailClient', 0.01052623425158722), ('FILE_UTILS', 0.010135998382289131), ('out', 0.009675726332899122), ('reader', 0.00911445536087545), ('loader', 0.006940135812086468), ('url', 0.006368837276184292), ('r', 0.006342201707411643)]
// processorClass       No	: [('processor', 0.5000406796268319), ('buildRule', 0.002755097978938733), ('b', 0.002221691812320429), ('name', 0.0021858116422960186), ('value', 0.0020369546210385805), ('p', 0.0018006416298861178), ('file', 0.001691466691848666), ('project', 0.0015701990170880612), ('line', 0.0013824258039910001), ('FILE_UTILS', 0.001303609992434397)]
        } catch (Exception e) {
// e                    0	: [('e', 0.5609362822907318), ('ex', 0.23366524059543178), ('t', 0.06384190584079849), ('exc', 0.05554991373077335), ('e2', 0.011102148877182246), ('x', 0.008244218306433652), ('be', 0.007845784234562876), ('ignored', 0.007844988311725367), ('resources', 4.943235527034611e-06), ('junit', 4.5452741082798665e-06)]
            throw new BuildException("The argument processor class"
                    + processorClass.getName()
// processorClass       No	: [('name', 0.0568169366559641), ('commandLine', 0.05136886062589471), ('e', 0.04942351216845873), ('className', 0.020061989264996714), ('src', 0.01942618873752333), ('srcFile', 0.019396341094446316), ('manifestFile', 0.01919547137299783), ('r', 0.017063463923584696), ('dir', 0.015954119706995187), ('ioe', 0.013930383642294777)]
                    + " could not be instantiated with a default constructor",
                    e);
// e                    7	: [('collectorFile', 0.30307046086958483), ('quiet', 0.15210163513638034), ('testDir', 0.10153563265317839), ('event', 0.05110103834578223), ('t1', 0.051058692601104676), ('exception', 0.051028298742734124), ('logFile', 0.05065634598845), ('e', 0.007666795479025933), ('j', 0.004109141554546879), ('tmpdir', 0.003587864466494572)]
        }
        return processor;
// processor            No	: [('reader', 0.12744551964017323), ('changed', 0.1266202529919646), ('saxParser', 0.12606985750662558), ('enableTestListenerEvents', 0.12581046238746518), ('result', 0.03336563814691577), ('classpath', 0.013850443778422367), ('buf', 0.010083200091417582), ('sb', 0.0071653461240079154), ('path', 0.006817474230337616), ('o', 0.005226249399104626)]
    }

    public void registerArgumentProcessor(ArgumentProcessor processor) {
// processor            0	: [('processor', 0.5000154179414318), ('resources', 7.909176843255377e-05), ('junit', 7.272438573247786e-05), ('srcDir', 5.8291651612305815e-05), ('separator', 5.7018175072290644e-05), ('expected', 5.489571417226535e-05), ('values', 4.683036275216921e-05), ('os', 4.1736456592108484e-05), ('token', 3.791602697206295e-05), ('entries', 3.749153479205789e-05)]
        if (processor == null) {
// processor            No	: [('file', 0.01951964422771794), ('name', 0.013810542019415228), ('line', 0.010197906795034399), ('project', 0.01018791700337574), ('classpath', 0.009262670792957776), ('src', 0.007691748530450561), ('value', 0.0075282278780144565), ('c', 0.007427408292637147), ('instr', 0.007306822157570866), ('failOnError', 0.0065500311730040065)]
            return;
        }
        processors.add(processor);
// processors           No	: [('cmd', 0.07644626440562094), ('writer', 0.0762948584315606), ('resources', 0.03810107818086172), ('runner', 0.02543540105062419), ('options', 0.02537908190015504), ('characters', 0.025365000009231427), ('message', 0.012797027189180896), ('classpath', 0.012729746776236821), ('c', 0.012722345636458863), ('pathComponents', 0.012682849161479203)]
// add                  6	: [('ant', 0.044091570944978786), ('junit', 0.014300260085660817), ('types', 0.011964008198735204), ('length', 0.01097465003307579), ('equals', 0.008534047435574633), ('append', 0.0078057644031294), ('add', 0.007455222117465603), ('setValue', 0.007170143065510916), ('getProperty', 0.007065516594166766), ('MSG_VERBOSE', 0.004680819935069069)]
// processor            No	: [('rc', 0.02768185452936221), ('instr', 0.015517696230631723), ('O', 0.015515361523641694), ('name', 0.014802532655502132), ('r', 0.014101841633422742), ('fileNameMapper', 0.013314202073896442), ('c', 0.012554475797399059), ('p', 0.009235926542044803), ('test', 0.008496252308472993), ('entry', 0.008397464677002527)]
        if (DEBUG) {
// DEBUG                No	: [('file', 0.009658636544763883), ('f', 0.009540601282219063), ('c', 0.009358917852118417), ('task', 0.00870070169073831), ('index', 0.008100204552486072), ('line', 0.00729301279790531), ('o', 0.00714646395836301), ('value', 0.006750543497966525), ('t', 0.0059698635518077026), ('fp', 0.005769188965015631)]
            System.out.println("Argument processor "
// out                  0	: [('out', 0.724503883918568), ('err', 0.14160981766581704), ('getProperty', 0.019840486369218948), ('gc', 0.008429116980283645), ('ant', 0.002755723184061174), ('junit', 0.0008937662553538011), ('in', 0.000795776197931931), ('types', 0.0007477505124209502), ('length', 0.0006859156270672368), ('console', 9.943967829228221e-05)]
                    + processor.getClass().getName() + " registered.");
// processor            No	: [('classname', 0.0795341157437511), ('currRecIdx', 0.062285101089844364), ('type', 0.031510932034024296), ('buildFile', 0.03124373116246576), ('currBlkIdx', 0.03116522545198154), ('currEntry', 0.031148564047963553), ('tempdir', 0.031148484455679797), ('ph', 0.031143257867062558), ('mainClassname', 0.031142753782598804), ('name', 0.023518946135573066)]
        }
    }

    private ArgumentProcessor getProcessorByService(InputStream is)
// is                   0	: [('is', 0.2513191476345212), ('in', 0.15224118611503845), ('fis', 0.04271800593034188), ('inStream', 0.030407929785040564), ('input', 0.02758198474339692), ('stream', 0.025393718815925954), ('i', 0.011827847478413079), ('inExpect', 0.011577821584390099), ('inputStream', 0.010207183059560383), ('finstr', 0.0057913856779679826)]
            throws IOException {
        try (BufferedReader rd = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {
// rd                   No	: [('reader', 0.5568970544486406), ('in1', 0.12250267235879306), ('inReader', 0.12250261929727055), ('in', 0.093544361276439), ('diskChecksumReader', 0.02250259276650931), ('linesReader', 0.013935085754451635), ('input', 0.0061679341734147), ('r', 0.004975414901627653), ('resources', 4.943235527034611e-06), ('junit', 4.5452741082798665e-06)]
// is                   0	: [('is', 0.2775662805874493), ('process', 0.21541574199696426), ('in', 0.08611160817407244), ('r', 0.06166717919572178), ('p', 0.03096777505301138), ('resource', 0.030805838110455674), ('stream', 0.030780561777500222), ('r1', 0.030777482387055327), ('r2', 0.03077446152455251), ('ins', 0.030772818439494844)]
// UTF_8                0	: [('UTF_8', 0.6458328215901394), ('ISO_8859_1', 0.27561748633289435), ('US_ASCII', 0.01607830761560204), ('ant', 0.002755723184061174), ('junit', 0.0008937662553538011), ('types', 0.0007477505124209502), ('length', 0.0006859156270672368), ('equals', 0.0005333779647234146), ('append', 0.00048786027519558746), ('add', 0.0004659513823416002)]
            String processorClassName = rd.readLine();
// processorClassName   No	: [('s', 0.16080443164132602), ('name', 0.0853677752398096), ('line', 0.06171069187599014), ('className', 0.05100607693251922), ('message', 0.04462039030101197), ('text', 0.023211245996270034), ('fileName', 0.022196778361734285), ('uri', 0.021889675665486524), ('location', 0.01951505972265976), ('buffer', 0.019378450985260073)]
// rd                   No	: [('buildRule', 0.005510195957877466), ('b', 0.004443383624640858), ('name', 0.004371623284592037), ('value', 0.004073909242077161), ('p', 0.0036012832597722352), ('file', 0.003382933383697332), ('project', 0.0031403980341761224), ('line', 0.0027648516079820003), ('FILE_UTILS', 0.002607219984868794), ('path', 0.002456654414077353)]
            if (processorClassName != null && !processorClassName.isEmpty()) {
// processorClassName   No	: [('t', 0.0124326061945085), ('task', 0.01161779270583427), ('c', 0.011220156600477814), ('params', 0.010643212305006533), ('ch', 0.010397900638993306), ('name', 0.009959577650586296), ('isUnixStyle', 0.009659028896609656), ('classpath', 0.009422557197807937), ('s', 0.009105783679277838), ('parent', 0.009017386293159997)]
// processorClassName   No	: [('parent', 0.02510371116565013), ('message', 0.01996826814241092), ('prefix', 0.01695875203715592), ('attrUri', 0.01602479056809394), ('value', 0.01546068517407477), ('dir', 0.015433460535584417), ('p', 0.015105678170437077), ('text', 0.015087000514516854), ('systemError', 0.014964120602025911), ('systemOutput', 0.014963696109845907)]
                return getProcessor(processorClassName);
// processorClassName   No	: [('buildRule', 0.004951521950198933), ('name', 0.004800311759937989), ('project', 0.0038152465421858743), ('file', 0.0033129618829022623), ('p', 0.003145741118217994), ('s', 0.002342339117349561), ('value', 0.002241040975596222), ('f', 0.0022282770559583446), ('e', 0.0021735564370546595), ('r', 0.00199754767162043)]
            }
        }
        return null;
    }

}
