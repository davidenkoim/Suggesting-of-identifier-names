// Path id: 43
// Path to file: C:\Users\Igor\IdeaProjects\SLP-Core-0.3\java-projects\ant-master\src\main\org\apache\tools\ant\DefaultLogger.java
// Number of identifiers: 199	Accuracy: 40.70%	MRR: 46.07%
// True 	Rank of true in predictions : [(predicted token, probability of a token), ...]

/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package org.apache.tools.ant;
// ant                  0	: [('ant', 0.9196139647681254), ('zip', 0.02056534215357834), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('length', 0.000684654181962615), ('equals', 0.0005342862894443045), ('append', 0.00048134282253043526), ('add', 0.00046681724707570745), ('getProperty', 0.00044244545489240106), ('resources', 0.00015633980883442153)]

import java.io.BufferedReader;
// java                 0	: [('java', 0.6107037003664428), ('junit', 0.0010014341184107721), ('jdepend', 1.7472387706915405e-05), ('resources', 4.945891699909404e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06), ('expected', 3.432697924455892e-06), ('values', 2.9282999993047215e-06), ('os', 2.6097328886829293e-06)]
import java.io.IOException;
// java                 0	: [('java', 0.9382037003664427), ('junit', 0.0010014341184107721), ('jdepend', 1.7472387706915405e-05), ('resources', 4.945891699909404e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06), ('expected', 3.432697924455892e-06), ('values', 2.9282999993047215e-06), ('os', 2.6097328886829293e-06)]
import java.io.PrintStream;
// java                 0	: [('java', 0.936174479587222), ('junit', 0.0010014341184107721), ('jdepend', 1.7472387706915405e-05), ('resources', 4.945891699909404e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06), ('expected', 3.432697924455892e-06), ('values', 2.9282999993047215e-06), ('os', 2.6097328886829293e-06)]
import java.io.StringReader;
// java                 0	: [('java', 0.9382037003664427), ('junit', 0.0010014341184107721), ('jdepend', 1.7472387706915405e-05), ('resources', 4.945891699909404e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06), ('expected', 3.432697924455892e-06), ('values', 2.9282999993047215e-06), ('os', 2.6097328886829293e-06)]
import java.text.DateFormat;
// java                 0	: [('java', 0.9382037003664427), ('junit', 0.0010014341184107721), ('jdepend', 1.7472387706915405e-05), ('resources', 4.945891699909404e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06), ('expected', 3.432697924455892e-06), ('values', 2.9282999993047215e-06), ('os', 2.6097328886829293e-06)]
// text                 0	: [('text', 0.010371476204546128), ('sql', 0.0031580389754043547), ('ant', 0.002756910788599475), ('time', 0.0017812888679142847), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('length', 0.000684654181962615), ('exists', 0.0005671140786216787), ('execute', 0.00047264213865332586), ('base', 0.00010465327128479917)]
import java.util.Date;
// java                 0	: [('java', 0.9382037003664427), ('junit', 0.0010014341184107721), ('jdepend', 1.7472387706915405e-05), ('resources', 4.945891699909404e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06), ('expected', 3.432697924455892e-06), ('values', 2.9282999993047215e-06), ('os', 2.6097328886829293e-06)]
import java.util.stream.Collectors;
// java                 0	: [('java', 0.9382037003664427), ('junit', 0.0010014341184107721), ('jdepend', 1.7472387706915405e-05), ('resources', 4.945891699909404e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06), ('expected', 3.432697924455892e-06), ('values', 2.9282999993047215e-06), ('os', 2.6097328886829293e-06)]
// stream               0	: [('stream', 0.22895402157560168), ('zip', 0.11863913061436189), ('jar', 0.04817937172688658), ('regexp', 0.021754413003101672), ('regex', 0.020082321636669637), ('facade', 0.005932953248426391), ('depend', 0.0054577963302833285), ('ant', 0.002756910788599475), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952)]
import java.util.stream.Stream;
// java                 0	: [('java', 0.9211582458209883), ('junit', 0.0010014341184107721), ('jdepend', 1.7472387706915405e-05), ('resources', 4.945891699909404e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06), ('expected', 3.432697924455892e-06), ('values', 2.9282999993047215e-06), ('os', 2.6097328886829293e-06)]
// stream               0	: [('stream', 0.22895402157560168), ('zip', 0.11863913061436189), ('jar', 0.04817937172688658), ('regexp', 0.021754413003101672), ('regex', 0.020082321636669637), ('facade', 0.005932953248426391), ('depend', 0.0054577963302833285), ('ant', 0.002756910788599475), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952)]

import org.apache.tools.ant.util.DateUtils;
// ant                  0	: [('ant', 0.9196139647681254), ('zip', 0.02056534215357834), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('length', 0.000684654181962615), ('equals', 0.0005342862894443045), ('append', 0.00048134282253043526), ('add', 0.00046681724707570745), ('getProperty', 0.00044244545489240106), ('resources', 0.00015633980883442153)]
import org.apache.tools.ant.util.StringUtils;
// ant                  0	: [('ant', 0.9196139647681254), ('zip', 0.02056534215357834), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('length', 0.000684654181962615), ('equals', 0.0005342862894443045), ('append', 0.00048134282253043526), ('add', 0.00046681724707570745), ('getProperty', 0.00044244545489240106), ('resources', 0.00015633980883442153)]

/**
 * Writes build events to a PrintStream. Currently, it
 * only writes which targets are being executed, and
 * any messages that get logged.
 *
 */
public class DefaultLogger implements BuildLogger {
    /**
     * Size of left-hand column for right-justified task name.
     * @see #messageLogged(BuildEvent)
     */
    public static final int LEFT_COLUMN_SIZE = 12;
// LEFT_COLUMN_SIZE     No	: [('SEND_FILES', 0.03096039236388315), ('DEFAULT_BUFFER_SIZE', 0.030960100344031752), ('MSG_ERR', 0.030632684359160837), ('FAIL', 0.030632153413976466), ('PROPERTIES', 0.030631994130421156), ('NULL', 0.0306319144886435), ('CONSTANT_UTF8', 0.030631887941384283), ('DEFAULT_COMPRESSION_LEVEL', 0.030631861394125062), ('DEFAULT_TIMEOUT', 0.030631861394125062), ('FORK_EXIT_CODE_SUCCESS', 0.030631861394125062)]

    // CheckStyle:VisibilityModifier OFF - bc
    /** PrintStream to write non-error messages to */
    protected PrintStream out;
// out                  0	: [('out', 0.12521038391677472), ('err', 0.03893829022576274), ('ps', 0.027808489844161816), ('output', 0.011202988062734535), ('sysErr', 0.008345780885375057), ('s', 0.0057842039866726), ('writer', 0.00562237189447673), ('savedOut', 0.0055688526198922695), ('tmpErr', 0.005568003107597278), ('tmpOut', 0.005567153595302287)]

    /** PrintStream to write error messages to */
    protected PrintStream err;
// err                  1	: [('out', 0.12521038391677472), ('err', 0.03893829022576274), ('ps', 0.027808489844161816), ('output', 0.011202988062734535), ('sysErr', 0.008345780885375057), ('s', 0.0057842039866726), ('writer', 0.00562237189447673), ('savedOut', 0.0055688526198922695), ('tmpErr', 0.005568003107597278), ('tmpOut', 0.005567153595302287)]

    /** Lowest level of message to write out */
    protected int msgOutputLevel = Project.MSG_ERR;
// msgOutputLevel       No	: [('height', 0.0999084210719419), ('start', 0.02643647517530875), ('port', 0.026054156449571743), ('logLevel', 0.02549713766168169), ('type', 0.025178005232183758), ('granularity', 0.025092621607938948), ('stop', 0.025091241150459586), ('verbosity', 0.0249797312038447), ('errors', 0.0249797312038447), ('keysize', 0.02494181789838162)]
// MSG_ERR              4	: [('MSG_DEBUG', 0.34956891467617174), ('MSG_INFO', 0.3107889309073353), ('MSG_WARN', 0.10490393160150141), ('MSG_VERBOSE', 0.07800547490801532), ('MSG_ERR', 0.006225764421368314), ('ant', 0.002756910788599475), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('length', 0.000684654181962615), ('equals', 0.0005342862894443045)]

    /** Time of the start of the build */
    private long startTime = System.currentTimeMillis();
// startTime            No	: [('timeout', 0.046953257688874254), ('size', 0.04027703863746091), ('granularity', 0.03963818669388995), ('millis', 0.027121278982625265), ('skip', 0.023789274920833218), ('lines', 0.022960515350406923), ('timeDiffMillis', 0.022956904923153207), ('endedAt', 0.022749476105213665), ('granularityMillis', 0.022541303964016008), ('bytesRead', 0.011273004343789774)]

    // CheckStyle:ConstantNameCheck OFF - bc
    /** Line separator */
    @Deprecated
    protected static final String lSep = StringUtils.LINE_SEP;
// lSep                 0	: [('lSep', 0.5041119499690907), ('DEFAULT_BAS_DTD_LOCATION', 0.0041119499690907), ('BES_DD', 0.0041119499690907), ('NOT_SUPPORTED_CHILD_PREFIX', 0.0041119499690907), ('JAVA2IIOP', 0.0041119499690907), ('ERROR_PROPERTY_ACCESS_BLOCKED', 0.0041119499690907), ('JARSIGNER_COMMAND', 0.0041119499690907), ('NOT_SUPPORTED_CHILD_POSTFIX', 0.004111923421831482), ('CLASSIC_COMPILER_CLASSNAME', 0.004111923421831482), ('FLAG_COMMENT', 0.001866827420837164)]
// LINE_SEP             0	: [('LINE_SEP', 0.7722813676929329), ('replace', 0.011261516548256096), ('ant', 0.002756910788599475), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('length', 0.000684654181962615), ('equals', 0.0005342862894443045), ('append', 0.00048134282253043526), ('add', 0.00046681724707570745), ('getProperty', 0.00044244545489240106)]
    // CheckStyle:ConstantNameCheck ON

    /** Whether or not to use emacs-style output */
    protected boolean emacsMode = false;
// emacsMode            5	: [('failOnError', 0.05231549987582017), ('verbose', 0.04082186717130068), ('debug', 0.039494502003559646), ('includeEmpty', 0.025783780116466825), ('isCaseSensitive', 0.013577709828052875), ('emacsMode', 0.013224092667509055), ('errorOnMissingDir', 0.012959596573100089), ('error', 0.01283462247492147), ('everythingIncluded', 0.01282708305330342), ('haveSlowResults', 0.012826764486192799)]
    // CheckStyle:VisibilityModifier ON


    /**
     * Sole constructor.
     */
    public DefaultLogger() {
    }

    /**
     * Sets the highest level of message this logger should respond to.
     *
     * Only messages with a message level lower than or equal to the
     * given level should be written to the log.
     * <p>
     * Constants for the message levels are in the
     * {@link Project Project} class. The order of the levels, from least
     * to most verbose, is <code>MSG_ERR</code>, <code>MSG_WARN</code>,
     * <code>MSG_INFO</code>, <code>MSG_VERBOSE</code>,
     * <code>MSG_DEBUG</code>.
     * <p>
     * The default message level for DefaultLogger is Project.MSG_ERR.
     *
     * @param level the logging level for the logger.
     */
    public void setMessageOutputLevel(int level) {
// level                0	: [('level', 0.8757637523843186), ('i', 0.03170946762069004), ('j', 0.002746856801521933), ('t', 0.0020168874916010045), ('port', 0.001497726335669343), ('index', 0.0014748251706259612), ('b', 0.001403765082222647), ('options', 0.0011229620555742576), ('mode', 0.0010389313867248172), ('counter', 0.0009004200130104218)]
        this.msgOutputLevel = level;
// msgOutputLevel       No	: [('level', 0.20053106253883565), ('compression', 0.1007642958151556), ('verboseLevel', 0.10023475457158067), ('compressionLevel', 0.10023472802432144), ('name', 0.01378508354388367), ('value', 0.008734193418159886), ('classpath', 0.008320844748841585), ('file', 0.006980360318755325), ('project', 0.006330615321277083), ('encoding', 0.005867283007685895)]
// level                1	: [('msgOutputLevel', 0.7656316901523968), ('level', 0.015669774566599924), ('buildRule', 0.0006894539079227441), ('b', 0.0005559648051552567), ('name', 0.0005468647831907378), ('value', 0.0005097305400785204), ('p', 0.00045059430702160157), ('file', 0.00042326690533637444), ('project', 0.00039281735671926524), ('line', 0.0003459404271803551)]
    }

    /**
     * Sets the output stream to which this logger is to send its output.
     *
     * @param output The output stream for the logger.
     *               Must not be <code>null</code>.
     */
    public void setOutputPrintStream(PrintStream output) {
// output               0	: [('output', 0.8807677543214885), ('out', 0.04667700034614977), ('ps', 0.01187316575039525), ('err', 0.007501210706677739), ('writer', 0.002040587432593985), ('newps', 0.0018634986305252526), ('resources', 4.945891699909404e-06), ('junit', 4.547682811632164e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06)]
        this.out = new PrintStream(output, true);
// out                  1	: [('output', 0.3592954917902474), ('out', 0.07421361266945505), ('outStream', 0.07168412966997029), ('name', 0.01378508354388367), ('value', 0.008734193418159886), ('classpath', 0.008320844748841585), ('file', 0.006980360318755325), ('project', 0.006330615321277083), ('encoding', 0.005867283007685895), ('destDir', 0.004044109581686504)]
// output               No	: [('stdout', 0.469125235359747), ('sds', 0.11728152758604414), ('stderr', 0.06912496988715475), ('out', 0.034657745745214276), ('outputStream', 0.03456792592790508), ('bos', 0.03456384173686133), ('errorStream', 0.03456352375359012), ('e', 0.01741578572889865), ('o', 0.017340051413285616), ('buildRule', 0.00030967754931566745)]
    }

    /**
     * Sets the output stream to which this logger is to send error messages.
     *
     * @param err The error stream for the logger.
     *            Must not be <code>null</code>.
     */
    public void setErrorPrintStream(PrintStream err) {
// err                  0	: [('err', 0.8825012107066776), ('out', 0.04667700034614977), ('ps', 0.01187316575039525), ('output', 0.005767754321488476), ('writer', 0.002040587432593985), ('newps', 0.0018634986305252526), ('resources', 4.945891699909404e-06), ('junit', 4.547682811632164e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06)]
        this.err = new PrintStream(err, true);
// err                  0	: [('err', 0.25032256200262076), ('interestedInSysErr', 0.25027611204187783), ('name', 0.01378508354388367), ('value', 0.008734193418159886), ('classpath', 0.008320844748841585), ('file', 0.006980360318755325), ('project', 0.006330615321277083), ('encoding', 0.005867283007685895), ('destDir', 0.004044109581686504), ('task', 0.003448162629225481)]
// err                  No	: [('stderr', 0.5691249698871548), ('stdout', 0.06912523535974693), ('out', 0.034657745745214276), ('outputStream', 0.03456792592790508), ('bos', 0.03456384173686133), ('errorStream', 0.03456352375359012), ('e', 0.01741578572889865), ('output', 0.017359540295234663), ('o', 0.017340051413285616), ('buildRule', 0.00030967754931566745)]
    }

    /**
     * Sets this logger to produce emacs (and other editor) friendly output.
     *
     * @param emacsMode <code>true</code> if output is to be unadorned so that
     *                  emacs and other editors can parse files names, etc.
     */
    public void setEmacsMode(boolean emacsMode) {
// emacsMode            0	: [('emacsMode', 0.8755195345045509), ('b', 0.010720027839949825), ('value', 0.0027497064457736), ('verbose', 0.0016417524398330814), ('append', 0.0014034487746678514), ('debug', 0.0012077869648912873), ('enable', 0.0010191480226128397), ('recursive', 0.0010161169596024015), ('caseSensitive', 0.0009144706272617982), ('followSymlinks', 0.0008702286613049929)]
        this.emacsMode = emacsMode;
// emacsMode            0	: [('emacsMode', 0.5004894021046808), ('name', 0.01378508354388367), ('value', 0.008734193418159886), ('classpath', 0.008320844748841585), ('file', 0.006980360318755325), ('project', 0.006330615321277083), ('encoding', 0.005867283007685895), ('destDir', 0.004044109581686504), ('task', 0.003448162629225481), ('verbose', 0.0030665692964786575)]
// emacsMode            0	: [('emacsMode', 0.9375071519216289), ('buildRule', 0.00034472695396137203), ('b', 0.0002779824025776284), ('name', 0.0002734323915953689), ('value', 0.0002548652700392602), ('p', 0.00022529715351080079), ('file', 0.00021163345266818722), ('project', 0.00019640867835963262), ('line', 0.00017297021359017755), ('FILE_UTILS', 0.00016311059305773115)]
    }

    /**
     * Responds to a build being started by just remembering the current time.
     *
     * @param event Ignored.
     */
    public void buildStarted(BuildEvent event) {
// event                0	: [('event', 0.9661609299579506), ('actual', 0.0002740753978238061), ('expected', 0.00013989558002052576), ('be', 0.00013803727187523197), ('resources', 4.945891699909404e-06), ('junit', 4.547682811632164e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06), ('values', 2.9282999993047215e-06)]
        startTime = System.currentTimeMillis();
// startTime            No	: [('log', 0.04590919397292262), ('check', 0.04308521198536633), ('targetName', 0.01231181088819993), ('cleanup', 0.00924696112477977), ('buildElement', 0.006160542937233259), ('pb', 0.006157310928012348), ('targetCount', 0.006155537833213542), ('buildRule', 0.005257464168969087), ('thrown', 0.0013508664637586231), ('resources', 9.274355662434689e-05)]
    }

    static void throwableMessage(StringBuffer m, Throwable error, boolean verbose) {
// m                    No	: [('buffer', 0.22649844031565933), ('sb', 0.07874648999879774), ('input', 0.07150139580160712), ('buf', 0.052628517932330345), ('inputBuffer', 0.040554068863925125), ('s', 0.035851503702738007), ('line', 0.007291669807223579), ('resources', 3.9567133599275234e-05), ('junit', 3.638146249305731e-05), ('srcDir', 2.9160607985630027e-05)]
// error                3	: [('t', 0.32373088512626136), ('cause', 0.1558390390553704), ('throwable', 0.09359872828072317), ('error', 0.04908890168685603), ('exception', 0.03439296809785395), ('thrown', 0.0268892066890969), ('e', 0.015246512962362619), ('resources', 3.9567133599275234e-05), ('junit', 3.638146249305731e-05), ('srcDir', 2.9160607985630027e-05)]
// verbose              0	: [('verbose', 0.7530098891440639), ('overwrite', 0.009508675543703812), ('preserveLastModified', 0.007393409601391632), ('append', 0.004302149738261588), ('haltOnFailure', 0.0033700209226604724), ('haltOnError', 0.003347740656126759), ('isCaseSensitive', 0.0033469973328686415), ('filtertrace', 0.0026695278936668403), ('fast', 0.0025594539239591966), ('reverseLoader', 0.002514468634744274)]
        while (error instanceof BuildException) { // #43398
// error                No	: [('bsLiveShadow', 0.11098496820176118), ('ch', 0.05613969512631508), ('remaining', 0.05494727794020355), ('windowStart', 0.054214595664151634), ('e', 0.027738849036769642), ('index', 0.02719574529339092), ('lineList', 0.026742530499989606), ('scanning', 0.026741469777299694), ('slowScanning', 0.026741469777299694), ('numEOL', 0.026741416682781256)]
            Throwable cause = error.getCause();
// cause                5	: [('t', 0.5855079764997823), ('error', 0.09354897573030585), ('te', 0.0456382466207967), ('thrownException', 0.04563644140716984), ('t2', 0.04487865327152033), ('cause', 0.010611827219992886), ('throwable', 0.008337825678823125), ('e', 0.007623256481181309), ('exception', 0.007581099433542359), ('resources', 1.9783566799637617e-05)]
// error                No	: [('e', 0.29220096425195835), ('failure', 0.2916869173390633), ('ex', 0.04184711298460463), ('cause', 0.041697185755846466), ('failed', 0.041678772703017716), ('aborted', 0.04167792319072273), ('buildRule', 0.0013789078158454881), ('b', 0.0011119296103105135), ('name', 0.0010937295663814757), ('value', 0.0010194610801570409)]
            if (cause == null) {
// cause                No	: [('t', 0.012504324694739251), ('task', 0.011674765348011566), ('c', 0.011272044306068093), ('params', 0.010708762803209601), ('ch', 0.010453806303477345), ('name', 0.010010210383357481), ('isUnixStyle', 0.009714358461915562), ('classpath', 0.009472876520041215), ('s', 0.009155859126646985), ('parent', 0.009067442287803753)]
                break;
            }
            String msg1 = error.toString();
// msg1                 No	: [('token', 0.7511721147863066), ('name', 0.008518948495659472), ('result', 0.00786378489551063), ('msg', 0.007420967078939329), ('value', 0.0073245379446331685), ('filename', 0.004767507199765744), ('path', 0.0046288586352759), ('antRun', 0.004428935533336128), ('s', 0.0037611901509549345), ('message', 0.0026887313362925643)]
// error                No	: [('buildRule', 0.0055156312633819525), ('b', 0.004447718441242054), ('name', 0.004374918265525903), ('value', 0.0040778443206281635), ('p', 0.0036047544561728126), ('file', 0.003386135242690996), ('project', 0.003142538853754122), ('line', 0.0027675234174428407), ('FILE_UTILS', 0.0026097694889236985), ('path', 0.0024590252984901593)]
            String msg2 = cause.toString();
// msg2                 No	: [('aConfigDir', 0.5020218551261718), ('expectedResult', 0.014152176483738635), ('value', 0.014034909526039691), ('mainClass', 0.012495456519212685), ('filename', 0.010723471233750139), ('name', 0.010513342553595576), ('classpath', 0.008472027801222616), ('ford', 0.006064248359843301), ('path', 0.005738179150741777), ('parent', 0.004132101898283307)]
// cause                No	: [('buildRule', 0.0055156312633819525), ('b', 0.004447718441242054), ('name', 0.004374918265525903), ('value', 0.0040778443206281635), ('p', 0.0036047544561728126), ('file', 0.003386135242690996), ('project', 0.003142538853754122), ('line', 0.0027675234174428407), ('FILE_UTILS', 0.0026097694889236985), ('path', 0.0024590252984901593)]
            if (msg1.endsWith(msg2)) {
// msg1                 No	: [('t', 0.012504324694739251), ('task', 0.011674765348011566), ('c', 0.011272044306068093), ('params', 0.010708762803209601), ('ch', 0.010453806303477345), ('name', 0.010010210383357481), ('isUnixStyle', 0.009714358461915562), ('classpath', 0.009472876520041215), ('s', 0.009155859126646985), ('parent', 0.009067442287803753)]
// msg2                 No	: [('buf', 0.04853597071931544), ('suffix', 0.048424792035123634), ('extension', 0.03559837802285414), ('sep', 0.024216285785020605), ('remoteFileSep', 0.024209812924486606), ('ext', 0.024209600546412857), ('candidate', 0.024207585290069906), ('SIG_END', 0.024205039088542584), ('resultStr', 0.01705641508076303), ('buildRule', 0.0012387101972626698)]
                m.append(msg1, 0, msg1.length() - msg2.length());
// m                    No	: [('log', 0.04649094706028582), ('cmd', 0.018245478539643995), ('sb', 0.006937843896223377), ('out', 0.005849609104626527), ('task', 0.005411246386367828), ('project', 0.004723281319959349), ('args', 0.004587545579106209), ('result', 0.004441688018913745), ('name', 0.003848944274981417), ('ejbFiles', 0.00337871146860845)]
// append               No	: [('exec', 0.03529910560210646), ('group', 0.008405496438465962), ('add', 0.005130996351553319), ('ant', 0.002756910788599475), ('entrySet', 0.0018909755957011683), ('unicode', 0.0018704081891509057), ('find', 0.0018688747328758535), ('get', 0.0011652068673068713), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952)]
// msg1                 No	: [('c', 0.028494707142300166), ('classpath', 0.024313596975738327), ('ch', 0.014233481196187853), ('path', 0.012300182046642634), ('line', 0.011411268615519502), ('suite', 0.011049138589790706), ('s', 0.0065895579809532555), ('value', 0.006564216166862848), ('src', 0.006236442346570473), ('TIMESTAMP_LOGGING_SDF', 0.006030454437369027)]
// msg1                 No	: [('data', 0.06223842812040973), ('buf', 0.04332209745346208), ('length', 0.03975176469392739), ('result', 0.034364436259375644), ('count', 0.02641866633887578), ('data2', 0.02634066434370765), ('buffer', 0.023959969189516397), ('b', 0.019875102132157686), ('width', 0.01917741596483984), ('args', 0.017151996538779413)]
// length               3	: [('ant', 0.0441105726175916), ('junit', 0.014309256620003343), ('types', 0.011971532435617521), ('length', 0.01095446691140184), ('equals', 0.008548580631108872), ('append', 0.007701485160486964), ('add', 0.00746907595321132), ('setValue', 0.007174648871725762), ('getProperty', 0.007079127278278418), ('MSG_VERBOSE', 0.00466584503937755)]
// msg2                 No	: [('postfixLength', 0.06875741316037987), ('index', 0.04599264095583593), ('suffix', 0.04583998601442473), ('start', 0.03615576965029202), ('s', 0.02313222235814424), ('t', 0.022977549825032445), ('trim', 0.022920674013065075), ('ext', 0.02291977140625165), ('lf', 0.022919665217214773), ('ends', 0.022919638669955555)]
// length               3	: [('ant', 0.0441105726175916), ('junit', 0.014309256620003343), ('types', 0.011971532435617521), ('length', 0.01095446691140184), ('equals', 0.008548580631108872), ('append', 0.007701485160486964), ('add', 0.00746907595321132), ('setValue', 0.007174648871725762), ('getProperty', 0.007079127278278418), ('MSG_VERBOSE', 0.00466584503937755)]
                error = cause;
// error                No	: [('className', 0.14342088362050878), ('info', 0.07198510261964217), ('methods', 0.07170390561128843), ('packageInfos', 0.07170010171468713), ('startIndex', 0.07169964278476651), ('toolsJar', 0.07169953659572963), ('commandLine', 0.019395775997078948), ('buildRule', 0.01251863498149076), ('newFilter', 0.007084369231140639), ('exe', 0.00675503998701603)]
// cause                No	: [('e', 0.1677352618372501), ('error', 0.11915142991770108), ('runner', 0.04775033995954225), ('event', 0.024482885908166326), ('t', 0.024342781480731976), ('err', 0.023933234378950834), ('exc', 0.02391858029186223), ('buildRule', 0.0027578156316909763), ('b', 0.002223859220621027), ('name', 0.0021874591327629513)]
            } else {
                break;
            }
        }
        if (verbose || !(error instanceof BuildException)) {
// verbose              No	: [('name', 0.01612599495638699), ('task', 0.015379108001204041), ('line', 0.015210370204429068), ('attributes', 0.014934241687923613), ('len', 0.014847016580431043), ('classpath', 0.011822045297607787), ('i', 0.011290876793433447), ('file', 0.009542963555748595), ('url', 0.008828850410378989), ('resourceStream', 0.007362863880131816)]
// error                No	: [('ze', 0.0695717713307746), ('loader', 0.06599078032014581), ('errorProperty', 0.06596553068294636), ('another', 0.06595842068819112), ('outputProperty', 0.06594399766203748), ('existing', 0.06593169374590603), ('theVersion', 0.06593158755686916), ('parent', 0.02418245753698429), ('o', 0.01736420681378447), ('c', 0.010751953341216714)]
            m.append(StringUtils.getStackTrace(error));
// m                    No	: [('log', 0.04649094706028582), ('cmd', 0.018245478539643995), ('sb', 0.006937843896223377), ('out', 0.005849609104626527), ('task', 0.005411246386367828), ('project', 0.004723281319959349), ('args', 0.004587545579106209), ('result', 0.004441688018913745), ('name', 0.003848944274981417), ('ejbFiles', 0.00337871146860845)]
// append               No	: [('exec', 0.03529910560210646), ('group', 0.008405496438465962), ('add', 0.005130996351553319), ('ant', 0.002756910788599475), ('entrySet', 0.0018909755957011683), ('unicode', 0.0018704081891509057), ('find', 0.0018688747328758535), ('get', 0.0011652068673068713), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952)]
// error                No	: [('e', 0.2669864542973294), ('t', 0.2375211260148035), ('ex', 0.10678175761179834), ('err', 0.10675569259947548), ('ioe', 0.05339357477617512), ('thrownException', 0.05337530414895306), ('e1', 0.0533744558043369), ('npe', 0.05337180399761211), ('buildRule', 0.00030967754931566745), ('name', 0.00030016607547126296)]
        } else {
            m.append(String.format("%s%n", error));
// m                    No	: [('log', 0.1113835034156004), ('cmd', 0.04166554083430242), ('sb', 0.02431225695368278), ('out', 0.01849116844162864), ('buf', 0.01767937973467123), ('classpath', 0.015195322401482043), ('result', 0.010191169889024543), ('task', 0.009989923539720882), ('commandLine', 0.007257982533105869), ('graphics', 0.007058579087825948)]
// append               No	: [('group', 0.008405496438465962), ('exec', 0.00752132782432868), ('add', 0.005130996351553319), ('ant', 0.002756910788599475), ('entrySet', 0.0018909755957011683), ('unicode', 0.0018704081891509057), ('find', 0.0018688747328758535), ('get', 0.0011652068673068713), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952)]
// format               0	: [('format', 0.8722259900673555), ('ant', 0.002756910788599475), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('length', 0.000684654181962615), ('equals', 0.0005342862894443045), ('append', 0.00048134282253043526), ('add', 0.00046681724707570745), ('setValue', 0.0004484155544828602), ('getProperty', 0.00044244545489240106)]
// error                No	: [('line', 0.9375439203420247), ('buildRule', 0.00045060292791281454), ('l', 0.00037704214952320655), ('e', 0.0003678659264041523), ('p', 0.00035582390337100773), ('name', 0.0002956137882052849), ('s', 0.0002704535068736924), ('value', 0.00026987077125239156), ('result', 0.000257134607235049), ('offset', 0.0002539223888696126)]
        }
    }

    /**
     * Prints whether the build succeeded or failed,
     * any errors the occurred during the build, and
     * how long the build took.
     *
     * @param event An event with any relevant extra information.
     *              Must not be <code>null</code>.
     */
    public void buildFinished(BuildEvent event) {
// buildFinished        No	: [('add', 0.13653133744741394), ('execute', 0.1069376800387911), ('log', 0.08902912689705819), ('validate', 0.08856906404363908), ('characters', 0.08439302177070615), ('setValue', 0.040440058849549966), ('addText', 0.040036000936385416), ('start', 0.028860043248052608), ('append', 0.027983029394393198), ('complete', 0.027561032127671782)]
// event                0	: [('event', 0.9661609299579506), ('actual', 0.0002740753978238061), ('expected', 0.00013989558002052576), ('be', 0.00013803727187523197), ('resources', 4.945891699909404e-06), ('junit', 4.547682811632164e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06), ('values', 2.9282999993047215e-06)]
        Throwable error = event.getException();
// error                1	: [('t', 0.5855079764997823), ('error', 0.09354897573030585), ('te', 0.0456382466207967), ('thrownException', 0.04563644140716984), ('t2', 0.04487865327152033), ('cause', 0.010611827219992886), ('throwable', 0.008337825678823125), ('e', 0.007623256481181309), ('exception', 0.007581099433542359), ('resources', 1.9783566799637617e-05)]
// event                0	: [('event', 0.41972702740518747), ('e', 0.020966907729656262), ('error', 0.014893928739712634), ('runner', 0.005968792494942781), ('t', 0.003042847685091497), ('err', 0.002991654297368854), ('exc', 0.002989822536482779), ('buildRule', 0.00034472695396137203), ('b', 0.0002779824025776284), ('name', 0.0002734323915953689)]
        StringBuffer message = new StringBuffer();
// message              No	: [('buf', 0.3429809256328318), ('sb', 0.33937324499939886), ('sbPath', 0.08453804973115622), ('buffer', 0.013249220157829651), ('line', 0.0036458349036117897), ('inputBuffer', 0.0036103677652958967), ('outputBuffer', 0.0036090934968534094), ('result', 0.0024529378948229966), ('resources', 1.9783566799637617e-05), ('junit', 1.8190731246528655e-05)]
        if (error == null) {
// error                No	: [('t', 0.012504324694739251), ('task', 0.011674765348011566), ('c', 0.011272044306068093), ('params', 0.010708762803209601), ('ch', 0.010453806303477345), ('name', 0.010010210383357481), ('isUnixStyle', 0.009714358461915562), ('classpath', 0.009472876520041215), ('s', 0.009155859126646985), ('parent', 0.009067442287803753)]
            message.append(String.format("%n%s", getBuildSuccessfulMessage()));
// message              4	: [('out', 0.5037745512459596), ('log', 0.02502102805462635), ('classpath', 0.011482820650156088), ('compileClasspath', 0.00453400151877842), ('message', 0.004467475992323369), ('path', 0.0043199904178261765), ('msg', 0.0036152300305942707), ('bootclasspath', 0.003027086309290429), ('ret', 0.0028213157440453115), ('name', 0.0028111089518801915)]
// append               0	: [('append', 0.5510765809177685), ('trim', 0.00601428804833782), ('length', 0.005148939896248329), ('execute', 0.004544463174760076), ('print', 0.0030093959775621673), ('ant', 0.002756910788599475), ('substring', 0.0017082829353304845), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('resources', 0.00015633980883442153)]
// format               0	: [('format', 0.8722259900673555), ('ant', 0.002756910788599475), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('length', 0.000684654181962615), ('equals', 0.0005342862894443045), ('append', 0.00048134282253043526), ('add', 0.00046681724707570745), ('setValue', 0.0004484155544828602), ('getProperty', 0.00044244545489240106)]
        } else {
            message.append(String.format("%n%s%n", getBuildFailedMessage()));
// message              No	: [('log', 0.1113835034156004), ('cmd', 0.04166554083430242), ('sb', 0.02431225695368278), ('out', 0.01849116844162864), ('buf', 0.01767937973467123), ('classpath', 0.015195322401482043), ('result', 0.010191169889024543), ('task', 0.009989923539720882), ('commandLine', 0.007257982533105869), ('graphics', 0.007058579087825948)]
// append               0	: [('append', 0.4820841014488518), ('trim', 0.02405715219335128), ('length', 0.020595759584993316), ('execute', 0.018177852699040303), ('print', 0.012037583910248669), ('ant', 0.0110276431543979), ('substring', 0.006833131741321938), ('junit', 0.003577314155000836), ('types', 0.0029928831089043807), ('resources', 0.0006253592353376861)]
// format               0	: [('format', 0.8722259900673555), ('ant', 0.002756910788599475), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('length', 0.000684654181962615), ('equals', 0.0005342862894443045), ('append', 0.00048134282253043526), ('add', 0.00046681724707570745), ('setValue', 0.0004484155544828602), ('getProperty', 0.00044244545489240106)]
            throwableMessage(message, error, Project.MSG_VERBOSE <= msgOutputLevel);
// message              No	: [('m', 0.5003100222275563), ('buildRule', 0.0024774203945253396), ('name', 0.0024013286037701037), ('project', 0.0019046512996642756), ('file', 0.0016575811473960884), ('p', 0.0015739181984853537), ('s', 0.001171947503125149), ('value', 0.001121263874944332), ('f', 0.0011148785205859731), ('e', 0.0010877128100074773)]
// error                No	: [('logLevel', 0.04126397072635715), ('t', 0.033168913574598786), ('priority', 0.032332710889577225), ('cause', 0.024750268620822618), ('loglevel', 0.024710898569772505), ('e', 0.017917570341596665), ('ioe', 0.016855327502827783), ('location', 0.01662378473047559), ('quiet', 0.01656679773195645), ('level', 0.01656616059773521)]
// MSG_VERBOSE          0	: [('MSG_VERBOSE', 0.305021527930909), ('MSG_WARN', 0.14460505720626446), ('MSG_DEBUG', 0.13089862983589726), ('MSG_INFO', 0.08307642738352261), ('MSG_ERR', 0.07564026497081584), ('ant', 0.0110276431543979), ('junit', 0.003577314155000836), ('types', 0.0029928831089043807), ('length', 0.00273861672785046), ('equals', 0.002137145157777218)]
// msgOutputLevel       No	: [('patIdxEnd', 0.04903842673739142), ('hi', 0.02453584367033021), ('strIdxEnd', 0.024525649522790315), ('ge', 0.024525649522790315), ('alphaSize', 0.019632183861426504), ('maxLen', 0.01962453825077158), ('lastShadow', 0.014729798320965284), ('unHi', 0.01472427649104784), ('end', 0.009836332659601472), ('dstFile', 0.00981976716984914)]
        }
        message.append(String.format("%nTotal time: %s",
// message              No	: [('log', 0.018432029486084897), ('cmd', 0.005727833012031778), ('commandLine', 0.004635644384338322), ('out', 0.0034835895340697724), ('sb', 0.0033701767991048495), ('writer', 0.003323112394339467), ('buf', 0.0022681961185887604), ('ds', 0.0019355660850308193), ('result', 0.001824540556784192), ('project', 0.0015682831021688385)]
// append               0	: [('append', 0.22468769202887962), ('execute', 0.19898890761920449), ('trim', 0.00601428804833782), ('length', 0.005148939896248329), ('print', 0.0030093959775621673), ('ant', 0.002756910788599475), ('substring', 0.0017082829353304845), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('resources', 0.00015633980883442153)]
// format               0	: [('format', 0.8722259900673555), ('ant', 0.002756910788599475), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('length', 0.000684654181962615), ('equals', 0.0005342862894443045), ('append', 0.00048134282253043526), ('add', 0.00046681724707570745), ('setValue', 0.0004484155544828602), ('getProperty', 0.00044244545489240106)]
                formatTime(System.currentTimeMillis() - startTime)));
// startTime            No	: [('now', 0.19556914364901143), ('start', 0.140843269650292), ('l', 0.13027040172713508), ('buildElement', 0.06510735104802928), ('targetElement', 0.06510732450077007), ('taskElement', 0.06510732450077007), ('t0', 0.06510708557543711), ('targetStartTime', 0.06510708557543711), ('name', 0.007849194787297866), ('resources', 4.945891699909404e-06)]

        String msg = message.toString();
// msg                  No	: [('expected', 0.13740344096723897), ('sysid', 0.13193648100246633), ('uri', 0.12999420193613453), ('newValue', 0.12800662209033084), ('output', 0.09170780954177118), ('driveSpecLower', 0.01508852217921372), ('name', 0.013457183133305722), ('driveSpec', 0.012302120399269893), ('s', 0.01226452510130506), ('resources', 4.945891699909404e-06)]
// message              No	: [('helper', 0.33560757198852537), ('name', 0.0025032231487833864), ('project', 0.0024261994355476504), ('eyeOhEx', 0.0022326314354612522), ('msg', 0.0008808241437920062), ('currentValue', 0.0008695309712617618), ('buildRule', 0.00034472695396137203), ('b', 0.0002779824025776284), ('value', 0.0002548652700392602), ('resources', 1.5259423053044718e-05)]
        if (error == null) {
// error                No	: [('t', 0.012504324694739251), ('task', 0.011674765348011566), ('c', 0.011272044306068093), ('params', 0.010708762803209601), ('ch', 0.010453806303477345), ('name', 0.010010210383357481), ('isUnixStyle', 0.009714358461915562), ('classpath', 0.009472876520041215), ('s', 0.009155859126646985), ('parent', 0.009067442287803753)]
            printMessage(msg, out, Project.MSG_VERBOSE);
// msg                  1	: [('be', 0.6389130374088141), ('msg', 0.027961137387190197), ('exc', 0.027799380096175625), ('buildRule', 0.0006193550986313349), ('name', 0.0006003321509425259), ('project', 0.00047616282491606886), ('file', 0.0004143952868490221), ('p', 0.0003934795496213384), ('s', 0.00029298687578128724), ('f', 0.0002787196301464933)]
// out                  0	: [('out', 0.5080175654573024), ('ioe', 0.05881121275849516), ('msgLevel', 0.017009008271723795), ('shouldBeEqual', 0.01564489235771963), ('e', 0.012457052317822561), ('o', 0.007888942589501432), ('inputFile', 0.007827761124025773), ('msg', 0.003968628273554266), ('ncdfe', 0.0039200702626515475), ('buildRule', 0.0009012058558256291)]
// MSG_VERBOSE          0	: [('MSG_VERBOSE', 0.4025107639654545), ('MSG_INFO', 0.2915382136917613), ('MSG_WARN', 0.07230252860313223), ('MSG_DEBUG', 0.06544931491794863), ('MSG_ERR', 0.03782013248540792), ('ant', 0.00551382157719895), ('junit', 0.001788657077500418), ('types', 0.0014964415544521904), ('length', 0.00136930836392523), ('equals', 0.001068572578888609)]
        } else {
            printMessage(msg, err, Project.MSG_ERR);
// msg                  1	: [('be', 0.2778260748176281), ('msg', 0.055922274774380394), ('exc', 0.05559876019235125), ('buildRule', 0.0012387101972626698), ('name', 0.0012006643018850518), ('project', 0.0009523256498321377), ('file', 0.0008287905736980442), ('p', 0.0007869590992426768), ('s', 0.0005859737515625745), ('f', 0.0005574392602929866)]
// err                  No	: [('out', 0.5080175654573024), ('ioe', 0.05881121275849516), ('msgLevel', 0.017009008271723795), ('shouldBeEqual', 0.01564489235771963), ('e', 0.012457052317822561), ('o', 0.007888942589501432), ('inputFile', 0.007827761124025773), ('msg', 0.003968628273554266), ('ncdfe', 0.0039200702626515475), ('buildRule', 0.0009012058558256291)]
// MSG_ERR              0	: [('MSG_ERR', 0.5378201324854079), ('MSG_VERBOSE', 0.1525107639654545), ('MSG_WARN', 0.07230252860313223), ('MSG_DEBUG', 0.06544931491794863), ('MSG_INFO', 0.041538213691761305), ('ant', 0.00551382157719895), ('junit', 0.001788657077500418), ('types', 0.0014964415544521904), ('length', 0.00136930836392523), ('equals', 0.001068572578888609)]
        }
        log(msg);
// log                  0	: [('log', 0.004608007371521224), ('cmd', 0.0014319582530079446), ('commandLine', 0.0011589110960845805), ('out', 0.0008708973835174431), ('sb', 0.0008425441997762124), ('writer', 0.0008307780985848667), ('buf', 0.0005670490296471901), ('ds', 0.0004838915212577047), ('result', 0.000456135139196048), ('project', 0.0003920707755422096)]
// msg                  0	: [('msg', 0.1015504341485746), ('message', 0.061937243555789945), ('TIMEOUT_MESSAGE', 0.02219050097376093), ('e', 0.015464967576400162), ('toExecute', 0.014763417176762019), ('FAIL_MSG', 0.0147540034088489), ('t', 0.007573612058854867), ('commandline', 0.007498353842389524), ('ioe', 0.007399161468988763), ('errorMessage', 0.00738041357494018)]
    }

    /**
     * This is an override point: the message that indicates whether a build failed.
     * Subclasses can change/enhance the message.
     * @return The classic "BUILD FAILED"
     */
    protected String getBuildFailedMessage() {
        return "BUILD FAILED";
    }

    /**
     * This is an override point: the message that indicates that a build succeeded.
     * Subclasses can change/enhance the message.
     * @return The classic "BUILD SUCCESSFUL"
     */
    protected String getBuildSuccessfulMessage() {
        return "BUILD SUCCESSFUL";
    }

    /**
     * Logs a message to say that the target has started if this
     * logger allows information-level messages.
     *
     * @param event An event with any relevant extra information.
     *              Must not be <code>null</code>.
      */
    public void targetStarted(BuildEvent event) {
// event                0	: [('event', 0.9661609299579506), ('actual', 0.0002740753978238061), ('expected', 0.00013989558002052576), ('be', 0.00013803727187523197), ('resources', 4.945891699909404e-06), ('junit', 4.547682811632164e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06), ('values', 2.9282999993047215e-06)]
        if (Project.MSG_INFO <= msgOutputLevel
// MSG_INFO             2	: [('MSG_DEBUG', 0.5384235436380577), ('MSG_VERBOSE', 0.05779666410174493), ('MSG_INFO', 0.04122071895752762), ('MSG_WARN', 0.03222849812363775), ('MSG_ERR', 0.021380100271308055), ('ant', 0.00551382157719895), ('junit', 0.001788657077500418), ('types', 0.0014964415544521904), ('length', 0.00136930836392523), ('equals', 0.001068572578888609)]
// msgOutputLevel       No	: [('patIdxEnd', 0.04903842673739142), ('hi', 0.02453584367033021), ('strIdxEnd', 0.024525649522790315), ('ge', 0.024525649522790315), ('alphaSize', 0.019632183861426504), ('maxLen', 0.01962453825077158), ('lastShadow', 0.014729798320965284), ('unHi', 0.01472427649104784), ('end', 0.009836332659601472), ('dstFile', 0.00981976716984914)]
                && !event.getTarget().getName().isEmpty()) {
// event                No	: [('prefix', 0.01223224729933696), ('ftp', 0.010455829533702433), ('doUpdate', 0.008646873029381219), ('attrUri', 0.008495322101638137), ('parent', 0.007741717409120573), ('name', 0.007418429038264141), ('s', 0.007292488840531659), ('args', 0.00713700034466448), ('value', 0.006239065578911261), ('message', 0.0057323801676137905)]
            String msg = String.format("%n%s:", event.getTarget().getName());
// msg                  0	: [('msg', 0.10587249972034217), ('message', 0.08534686834251112), ('name', 0.05529836535721348), ('filename', 0.03844979940217812), ('token', 0.03782552849574032), ('className', 0.031018049828016828), ('value', 0.023085947182225897), ('arg', 0.01972274397673013), ('nextToken', 0.018758057494114577), ('fromFile', 0.018757898210559266)]
// format               0	: [('format', 0.8947887313800967), ('ant', 0.002756910788599475), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('length', 0.000684654181962615), ('equals', 0.0005342862894443045), ('append', 0.00048134282253043526), ('add', 0.00046681724707570745), ('setValue', 0.0004484155544828602), ('getProperty', 0.00044244545489240106)]
// event                0	: [('event', 0.468795162846882), ('targetName', 0.46875778253619177), ('buildRule', 0.00045060292791281454), ('l', 0.00037704214952320655), ('e', 0.0003678659264041523), ('p', 0.00035582390337100773), ('name', 0.0002956137882052849), ('s', 0.0002704535068736924), ('value', 0.00026987077125239156), ('result', 0.000257134607235049)]
            printMessage(msg, out, event.getPriority());
// msg                  1	: [('exc', 0.486132713429509), ('msg', 0.2571278040538569), ('be', 0.013913037408814059), ('buildRule', 0.0006193550986313349), ('name', 0.0006003321509425259), ('project', 0.00047616282491606886), ('file', 0.0004143952868490221), ('p', 0.0003934795496213384), ('s', 0.00029298687578128724), ('f', 0.0002787196301464933)]
// out                  0	: [('out', 0.7540087827286511), ('ioe', 0.02940560637924758), ('msgLevel', 0.008504504135861898), ('shouldBeEqual', 0.007822446178859814), ('e', 0.006228526158911281), ('o', 0.003944471294750716), ('inputFile', 0.0039138805620128865), ('msg', 0.001984314136777133), ('ncdfe', 0.0019600351313257738), ('buildRule', 0.00045060292791281454)]
// event                0	: [('event', 0.7804002602122886), ('indent', 0.030363621920775026), ('in', 0.02279143179194588), ('newBuffer', 0.015183977308674948), ('message', 0.007635691915505093), ('localFile', 0.007600138149374914), ('err', 0.0058227757202726355), ('buildRule', 0.00045060292791281454), ('l', 0.00037704214952320655), ('e', 0.0003678659264041523)]
            log(msg);
// log                  0	: [('log', 0.5054846880620435), ('commandLine', 0.019395775997078948), ('buildRule', 0.01251863498149076), ('newFilter', 0.007084369231140639), ('exe', 0.00675503998701603), ('out', 0.005783451694808403), ('ret', 0.00464945697930864), ('sb', 0.004101548958694866), ('javac', 0.003931279497973502), ('i', 0.0005661479106308009)]
// msg                  0	: [('msg', 0.0640354194034559), ('message', 0.035799742232901756), ('buf', 0.029304567467649922), ('commandLine', 0.029294907768330873), ('commandline', 0.029277885446131493), ('entry', 0.006378506515811834), ('cmdl', 0.004276028889504437), ('e', 0.0008291249145596224), ('name', 0.0003579294765803203), ('buildRule', 0.00030967754931566745)]
        }
    }

    /**
     * No-op implementation.
     *
     * @param event Ignored.
     */
    public void targetFinished(BuildEvent event) {
// event                0	: [('event', 0.9661609299579506), ('actual', 0.0002740753978238061), ('expected', 0.00013989558002052576), ('be', 0.00013803727187523197), ('resources', 4.945891699909404e-06), ('junit', 4.547682811632164e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06), ('values', 2.9282999993047215e-06)]
    }

    /**
     * No-op implementation.
     *
     * @param event Ignored.
     */
    public void taskStarted(BuildEvent event) {
// event                0	: [('event', 0.9661609299579506), ('actual', 0.0002740753978238061), ('expected', 0.00013989558002052576), ('be', 0.00013803727187523197), ('resources', 4.945891699909404e-06), ('junit', 4.547682811632164e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06), ('values', 2.9282999993047215e-06)]
    }

    /**
     * No-op implementation.
     *
     * @param event Ignored.
     */
    public void taskFinished(BuildEvent event) {
// event                0	: [('event', 0.9661609299579506), ('actual', 0.0002740753978238061), ('expected', 0.00013989558002052576), ('be', 0.00013803727187523197), ('resources', 4.945891699909404e-06), ('junit', 4.547682811632164e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06), ('values', 2.9282999993047215e-06)]
    }

    /**
     * Logs a message, if the priority is suitable.
     * In non-emacs mode, task level messages are prefixed by the
     * task name which is right-justified.
     *
     * @param event A BuildEvent containing message information.
     *              Must not be <code>null</code>.
     */
    public void messageLogged(BuildEvent event) {
// event                0	: [('event', 0.9661609299579506), ('actual', 0.0002740753978238061), ('expected', 0.00013989558002052576), ('be', 0.00013803727187523197), ('resources', 4.945891699909404e-06), ('junit', 4.547682811632164e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06), ('values', 2.9282999993047215e-06)]
        int priority = event.getPriority();
// priority             0	: [('priority', 0.7509303507974443), ('index', 0.014658018805573159), ('i', 0.005424290557193395), ('j', 0.004236081271100866), ('count', 0.003828482422778501), ('start', 0.003710812557200157), ('idx', 0.0036023303888330412), ('length', 0.003201206290366264), ('percIndex', 0.0031647052118015835), ('read', 0.002874376629472424)]
// event                0	: [('event', 0.8375841702623303), ('self', 0.0437527875837548), ('priority', 0.012503291981679949), ('buildRule', 0.00034472695396137203), ('b', 0.0002779824025776284), ('name', 0.0002734323915953689), ('value', 0.0002548652700392602), ('p', 0.00022529715351080079), ('file', 0.00021163345266818722), ('project', 0.00019640867835963262)]
        // Filter out messages based on priority
        if (priority <= msgOutputLevel) {
// priority             No	: [('t', 0.012504324694739251), ('task', 0.011674765348011566), ('c', 0.011272044306068093), ('params', 0.010708762803209601), ('ch', 0.010453806303477345), ('name', 0.010010210383357481), ('isUnixStyle', 0.009714358461915562), ('classpath', 0.009472876520041215), ('s', 0.009155859126646985), ('parent', 0.009067442287803753)]
// msgOutputLevel       No	: [('patIdxEnd', 0.04903842673739142), ('hi', 0.02453584367033021), ('strIdxEnd', 0.024525649522790315), ('ge', 0.024525649522790315), ('alphaSize', 0.019632183861426504), ('maxLen', 0.01962453825077158), ('lastShadow', 0.014729798320965284), ('unHi', 0.01472427649104784), ('end', 0.009836332659601472), ('dstFile', 0.00981976716984914)]

            StringBuilder message = new StringBuilder();
// message              3	: [('buf', 0.23684758374615414), ('sb', 0.19030835125094323), ('result', 0.06984319373485645), ('message', 0.039320002099993714), ('option', 0.03832596979317183), ('b', 0.029588869972705083), ('sb1', 0.02555055114172471), ('cleanedBuffer', 0.02555055114172471), ('buffer', 0.01328266135833905), ('classpath', 0.012801998316606692)]
            if (event.getTask() == null || emacsMode) {
// event                No	: [('t', 0.012504324694739251), ('task', 0.011674765348011566), ('c', 0.011272044306068093), ('params', 0.010708762803209601), ('ch', 0.010453806303477345), ('name', 0.010010210383357481), ('isUnixStyle', 0.009714358461915562), ('classpath', 0.009472876520041215), ('s', 0.009155859126646985), ('parent', 0.009067442287803753)]
// emacsMode            No	: [('attribute', 0.2310377398312891), ('ex', 0.11652971529040287), ('userInfo', 0.11551891378727602), ('la', 0.11551872795646148), ('sfe', 0.11551867486194306), ('def', 0.032223792342609824), ('value', 0.011661626392771022), ('line', 0.0047565501581402275), ('name', 0.0033006328968447026), ('other', 0.0028449901420431137)]
                // emacs mode or there is no task
                message.append(event.getMessage());
// message              No	: [('task', 0.10102912543982971), ('buildRule', 0.021029856675876347), ('log', 0.01143397948798083), ('thrown', 0.0054034658550344925), ('cmd', 0.0035653733687412777), ('out', 0.001905700252742214), ('project', 0.001874902704709568), ('sb', 0.0016792987603776273), ('result', 0.0011550973090101513), ('s', 0.0011247240141248893)]
// append               0	: [('append', 0.602153161835537), ('trim', 0.01202857609667564), ('length', 0.010297879792496658), ('execute', 0.009088926349520151), ('print', 0.0060187919551243346), ('ant', 0.00551382157719895), ('substring', 0.003416565870660969), ('junit', 0.001788657077500418), ('types', 0.0014964415544521904), ('resources', 0.00031267961766884305)]
// event                No	: [('ex', 0.064003398680688), ('c', 0.0071236767855750414), ('classpath', 0.006078399243934582), ('ch', 0.0035583702990469633), ('path', 0.0030750455116606585), ('line', 0.0028528171538798755), ('suite', 0.0027622846474476765), ('s', 0.0016473894952383139), ('value', 0.001641054041715712), ('src', 0.0015591105866426182)]
            } else {
                // Print out the name of the task if we're in one
                String name = event.getTask().getTaskName();
// name                 No	: [('base', 0.18357980614397332), ('currentSuffix', 0.12224540200221207), ('ant', 0.08384715220665047), ('path', 0.06221325069402962), ('token', 0.06171556969879208), ('attributeName', 0.061440759406390814), ('shortLabel', 0.06130582784712865), ('nodeName', 0.06112308998710734), ('defaultManifest', 0.06112306343984813), ('errorMsg', 0.061123036892588904)]
// event                2	: [('key', 0.05369256205335518), ('def', 0.05304464329348683), ('event', 0.04226685115109004), ('vpath', 0.04212149005091745), ('entry', 0.02459483214283362), ('file', 0.022741557751545998), ('resource', 0.021778758785443646), ('t', 0.021182569731016745), ('p', 0.018118079106486096), ('c', 0.01792525182224384)]
                String label = "[" + name + "] ";
// label                No	: [('expectedResult', 0.02830435296747727), ('value', 0.028069819052079382), ('mainClass', 0.02499091303842537), ('filename', 0.021446942467500278), ('name', 0.02102668510719115), ('classpath', 0.016944055602445232), ('ford', 0.012128496719686603), ('path', 0.011476358301483554), ('p', 0.008279370227951532), ('parent', 0.008264203796566614)]
// name                 0	: [('name', 0.8860703512825135), ('index', 0.020850153324374947), ('directory', 0.01043011515578753), ('e', 0.0005681044998187166), ('file', 0.0005295906124618365), ('i', 0.00027364539345187594), ('value', 0.0002684230578568769), ('f', 0.000249337640401834), ('ioe', 0.00024407174668248624), ('resources', 4.945891699909404e-06)]
                int size = LEFT_COLUMN_SIZE - label.length();
// size                 0	: [('size', 0.8764638305906749), ('i', 0.003988289915021017), ('count', 0.0035831525067196047), ('index', 0.0024166795321453353), ('len', 0.0017655839135722298), ('start', 0.001739644376841458), ('pos', 0.001284463859823993), ('bsBuffShadow', 0.0011945946635839716), ('exitCode', 0.0011258808484908818), ('bsLiveShadow', 0.0009478074147796049)]
// LEFT_COLUMN_SIZE     No	: [('rcs', 0.09401617913450892), ('rc', 0.04701769305961855), ('entries', 0.03204345865399393), ('size', 0.013185427724100649), ('names', 0.010678640746856686), ('s', 0.005486833244926291), ('tokenizer', 0.005375186848548194), ('message', 0.005368340420790291), ('children', 0.005359269238085984), ('buildRule', 0.00034472695396137203)]
// label                0	: [('label', 0.5004066491068065), ('start', 0.004028104463999422), ('WORD', 0.003599645227478955), ('lo', 0.003197520872103223), ('now', 0.0031941228229232575), ('bsLiveShadow', 0.0028024049931611706), ('n', 0.0024119614318415714), ('s', 0.0021047700754311337), ('index', 0.0020351100672418355), ('ltLo', 0.0019992181727784466)]
// length               0	: [('length', 0.8347026416972586), ('substring', 0.04210704206113716), ('ant', 0.00551382157719895), ('junit', 0.001788657077500418), ('types', 0.0014964415544521904), ('equals', 0.001068572578888609), ('append', 0.0009626856450608706), ('add', 0.0009336344941514149), ('getProperty', 0.0008848909097848021), ('resources', 0.00031267961766884305)]
                final String prefix = size > 0 ? Stream.generate(() -> " ")
// prefix               No	: [('message', 0.07580834290088576), ('className', 0.046411120356077716), ('name', 0.03744706752813828), ('filename', 0.02624904692803212), ('value', 0.024338533850991217), ('s', 0.02334565868558901), ('sourceFile', 0.022663431044054255), ('module', 0.02256234611499246), ('entryName', 0.022511555176118893), ('cp', 0.022470039941402065)]
// size                 No	: [('nsPrefixMap', 0.10776001099122344), ('prefix', 0.07348470979288507), ('zfs', 0.03309937898685019), ('value', 0.02795035538910013), ('oldStyle', 0.026974835566218564), ('tarFileSet', 0.026958546294127295), ('afs', 0.026950720225192282), ('success', 0.026943000345294146), ('targetPrefix', 0.012215054056505581), ('buildRule', 0.0013789078158454881)]
                    .limit(size).collect(Collectors.joining()) + label : label;
// limit                No	: [('append', 0.5111688297656621), ('setValue', 0.04950412865706682), ('getProperty', 0.03781926987417711), ('equals', 0.013229295328425683), ('ant', 0.0110276431543979), ('map', 0.009774849310759245), ('log', 0.007409443503926163), ('exists', 0.0064949303118042034), ('collect', 0.006017497509308958), ('replace', 0.005535317154055919)]
// size                 No	: [('position', 0.14792055643412544), ('b', 0.023038462942334), ('buildRule', 0.0006193550986313349), ('name', 0.0006003321509425259), ('project', 0.00047616282491606886), ('file', 0.0004143952868490221), ('p', 0.0003934795496213384), ('s', 0.00029298687578128724), ('value', 0.000280315968736083), ('f', 0.0002787196301464933)]
// collect              8	: [('sum', 0.25007682636464207), ('setValue', 0.04950412865706682), ('getProperty', 0.03781926987417711), ('equals', 0.013229295328425683), ('append', 0.011168829765662127), ('map', 0.009774849310759245), ('log', 0.007409443503926163), ('exists', 0.0064949303118042034), ('collect', 0.006017497509308958), ('replace', 0.005535317154055919)]
// label                No	: [('suffix', 0.28047854486917073), ('tzMarker', 0.2650054256042917), ('name', 0.0015940664794002626), ('res', 0.001504322281405381), ('value', 0.0011102406111265979), ('endToken', 0.000952233636827844), ('eol', 0.0009074450599013138), ('task', 0.0008716436394053446), ('line', 0.0007844557388819478), ('result', 0.0007664948427081694)]
// label                No	: [('files', 0.006901489045327533), ('name', 0.006401191940850807), ('resources', 0.005703764225753909), ('log', 0.005535179793380265), ('instructions', 0.005357609844635973), ('cpInfo', 0.004748128531161769), ('filesets', 0.004178149539404667), ('s', 0.004077079455391763), ('state', 0.0038842401644287056), ('params', 0.0038791430906587564)]

                try (BufferedReader r =
// r                    6	: [('reader', 0.5462616446644074), ('in', 0.14812769055398162), ('linesReader', 0.09605198978970926), ('input', 0.03506314443968764), ('br', 0.033951480803837905), ('rd', 0.00961306476718651), ('r', 0.0006612301567407148), ('resources', 9.891783399818808e-06), ('junit', 9.095365623264327e-06), ('srcDir', 7.290151996407507e-06)]
                    new BufferedReader(new StringReader(event.getMessage()))) {
// event                No	: [('lines', 0.43361361041600527), ('out', 0.21690213179394813), ('source', 0.10031024220674221), ('s', 0.050283856075253285), ('tSqlCommand', 0.05013856478167333), ('from', 0.014448887483489933), ('buildRule', 0.00030967754931566745), ('name', 0.00030016607547126296), ('project', 0.00023808141245803443), ('file', 0.00020719764342451105)]
                    message.append(r.lines()
// message              No	: [('outputLines', 0.1716006634595681), ('cache', 0.08713863502339636), ('properties', 0.04551360884033796), ('zipFile', 0.045432994986509545), ('notFollowedSymlinks', 0.044133894765563376), ('name', 0.043802611655599816), ('dest', 0.04303975013680784), ('links', 0.04290689040849126), ('log', 0.030402079488076154), ('algorithm', 0.004940111310239495)]
// append               0	: [('append', 0.8010765809177685), ('trim', 0.00601428804833782), ('length', 0.005148939896248329), ('execute', 0.004544463174760076), ('print', 0.0030093959775621673), ('ant', 0.002756910788599475), ('substring', 0.0017082829353304845), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('resources', 0.00015633980883442153)]
// r                    No	: [('ex', 0.064003398680688), ('c', 0.0071236767855750414), ('classpath', 0.006078399243934582), ('ch', 0.0035583702990469633), ('path', 0.0030750455116606585), ('line', 0.0028528171538798755), ('suite', 0.0027622846474476765), ('s', 0.0016473894952383139), ('value', 0.001641054041715712), ('src', 0.0015591105866426182)]
// lines                No	: [('as', 0.1143397952853829), ('isDirectory', 0.11000397108853179), ('name', 0.03308126156638384), ('size', 0.022755756305744407), ('prefix', 0.021881959716296837), ('regex', 0.021866580942936756), ('children', 0.021843850856162778), ('characters', 0.021822113744693943), ('builtin', 0.02182020234203021), ('length', 0.01364404194779181)]
                        .collect(Collectors.joining(System.lineSeparator() + prefix, prefix, "")));
// collect              0	: [('collect', 0.2524545834233174), ('map', 0.13034184991795966), ('count', 0.0835420931782121), ('setValue', 0.04387546203883911), ('filter', 0.043384608574464516), ('getProperty', 0.033447595879794755), ('equals', 0.00919861991724515), ('log', 0.006270832939835588), ('size', 0.002889048781914076), ('ant', 0.002756910788599475)]
// prefix               No	: [('line', 0.7508882596154727), ('res', 0.0032323198708614203), ('endToken', 0.00196421205650916), ('eol', 0.0019418177680458949), ('value', 0.001547183797626791), ('task', 0.0014278853117661644), ('result', 0.0013753109134175766), ('token', 0.0013092239601267814), ('cvs', 0.0012965799902677415), ('SPACER', 0.001290669487856108)]
// prefix               No	: [('suffix', 0.026384909212022037), ('zOut', 0.01342279762373573), ('name', 0.007761402521242192), ('k', 0.006731580499192409), ('base', 0.00672224629659955), ('uri', 0.006665476892480183), ('dirMode', 0.006636710096139395), ('compress', 0.00659755242316303), ('nodeText', 0.00658991202883413), ('prefixSeparator', 0.006589593461723509)]
                } catch (IOException e) {
// e                    0	: [('e', 0.4062535928503824), ('ioe', 0.3131816103189324), ('ex', 0.12802449726581597), ('ioex', 0.02021942735040827), ('exc', 0.013410001045040644), ('x', 0.010779920497983408), ('eyeOhEx', 0.00955143502058225), ('be', 0.006295322281320521), ('exception', 0.0062950833559875545), ('fne', 0.006294472769025529)]
                    // shouldn't be possible
                    message.append(label).append(event.getMessage());
// message              No	: [('log', 0.08747282942128742), ('e', 0.018165872308240762), ('error', 0.009457730779345698), ('out', 0.007643929135500694), ('process', 0.006097620991640279), ('exception', 0.005525871027232326), ('needsUpdate', 0.005513977148623295), ('lookAhead', 0.005507597158693049), ('nextElement', 0.005506779765226108), ('retries', 0.005506408103597049)]
// append               0	: [('append', 0.602153161835537), ('trim', 0.01202857609667564), ('length', 0.010297879792496658), ('execute', 0.009088926349520151), ('print', 0.0060187919551243346), ('ant', 0.00551382157719895), ('substring', 0.003416565870660969), ('junit', 0.001788657077500418), ('types', 0.0014964415544521904), ('resources', 0.00031267961766884305)]
// label                No	: [('ex', 0.064003398680688), ('c', 0.0071236767855750414), ('classpath', 0.006078399243934582), ('ch', 0.0035583702990469633), ('path', 0.0030750455116606585), ('line', 0.0028528171538798755), ('suite', 0.0027622846474476765), ('s', 0.0016473894952383139), ('value', 0.001641054041715712), ('src', 0.0015591105866426182)]
// append               3	: [('setValue', 0.09900825731413364), ('getProperty', 0.07563853974835422), ('equals', 0.026458590656851366), ('append', 0.022337659531324255), ('map', 0.01954969862151849), ('log', 0.01481888700785233), ('exists', 0.012989860623608407), ('collect', 0.012034995018617916), ('replace', 0.011070634308111837), ('filter', 0.007662197368046058)]
// event                No	: [('classpath', 0.027541413872484547), ('TIMESTAMP_LOGGING_SDF', 0.02609215029560759), ('stats', 0.017396064231343874), ('s', 0.014833240528938167), ('eol', 0.013551607074422357), ('line', 0.013397942000067444), ('value', 0.010974415775739117), ('key', 0.009325594407754727), ('exitCode', 0.008709258031018357), ('granularity', 0.008698970538908684)]
                }
            }
            Throwable ex = event.getException();
// ex                   5	: [('t', 0.6121924235877998), ('cause', 0.02122365443998577), ('throwable', 0.01667565135764625), ('e', 0.015246512962362619), ('exception', 0.015162198867084717), ('ex', 0.01063692023863622), ('error', 0.010627363225317566), ('thrown', 0.007658437458327668), ('ignored', 0.0030365268063238912), ('resources', 3.9567133599275234e-05)]
// event                0	: [('event', 0.5836700143826545), ('e', 0.08386763091862505), ('buildRule', 0.0013789078158454881), ('b', 0.0011119296103105135), ('name', 0.0010937295663814757), ('value', 0.0010194610801570409), ('p', 0.0009011886140432031), ('file', 0.0008465338106727489), ('project', 0.0007856347134385305), ('line', 0.0006918808543607102)]
            if (Project.MSG_DEBUG <= msgOutputLevel && ex != null) {
// MSG_DEBUG            0	: [('MSG_DEBUG', 0.7692117718190288), ('MSG_VERBOSE', 0.028898332050872465), ('MSG_INFO', 0.02061035947876381), ('MSG_WARN', 0.016114249061818874), ('MSG_ERR', 0.010690050135654027), ('ant', 0.002756910788599475), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('length', 0.000684654181962615), ('equals', 0.0005342862894443045)]
// msgOutputLevel       0	: [('msgOutputLevel', 0.9378076549189474), ('patIdxEnd', 0.0030649016710869634), ('hi', 0.0015334902293956383), ('strIdxEnd', 0.0015328530951743947), ('ge', 0.0015328530951743947), ('alphaSize', 0.0012270114913391565), ('maxLen', 0.0012265336406732238), ('lastShadow', 0.0009206123950603303), ('unHi', 0.00092026728069049), ('end', 0.000614770791225092)]
// ex                   0	: [('ex', 0.9375236610028679), ('file', 0.0006972478411032285), ('c', 0.0003261033284284113), ('index', 0.00026302916026842805), ('value', 0.00025323392819785176), ('rc', 0.00024195134302999662), ('out', 0.00023098803155380713), ('other', 0.00022222743601170783), ('name', 0.00020826499082487364), ('args', 0.00018623076567353302)]
                message.append(String.format("%n%s: ", ex.getClass().getSimpleName()))
// message              No	: [('cmd', 0.044915204155248245), ('log', 0.04371502819144463), ('project', 0.021543612061381764), ('buf', 0.0104786194150865), ('redirector', 0.01005134297195182), ('out', 0.00989404708314781), ('commandLine', 0.009336899104943177), ('toExecute', 0.0092505712864679), ('writer', 0.007375223941200781), ('testDefinition', 0.005847776035282312)]
// append               0	: [('append', 0.5510765809177685), ('trim', 0.00601428804833782), ('length', 0.005148939896248329), ('execute', 0.004544463174760076), ('print', 0.0030093959775621673), ('ant', 0.002756910788599475), ('substring', 0.0017082829353304845), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('resources', 0.00015633980883442153)]
// format               0	: [('format', 0.8722259900673555), ('ant', 0.002756910788599475), ('junit', 0.000894328538750209), ('types', 0.0007482207772260952), ('length', 0.000684654181962615), ('equals', 0.0005342862894443045), ('append', 0.00048134282253043526), ('add', 0.00046681724707570745), ('setValue', 0.0004484155544828602), ('getProperty', 0.00044244545489240106)]
// ex                   No	: [('buildRule', 0.007209646846605034), ('l', 0.006032674392371305), ('e', 0.005885854822466437), ('p', 0.005693182453936124), ('name', 0.004729820611284559), ('s', 0.004327256109979079), ('value', 0.004317932340038265), ('result', 0.004114153715760784), ('offset', 0.004062758221913801), ('f', 0.0034685586521098393)]
                        .append(StringUtils.getStackTrace(ex));
// append               4	: [('collect', 0.2598265668906963), ('filter', 0.1275954752057651), ('iterator', 0.11845384882310349), ('clone', 0.11558116705514625), ('append', 0.10125477428633532), ('map', 0.01835280323678072), ('from', 0.015309498613354146), ('user', 0.015298625398373069), ('setValue', 0.012376032164266705), ('getProperty', 0.009454817468544277)]
// ex                   2	: [('e', 0.2669864542973294), ('t', 0.2375211260148035), ('ex', 0.10678175761179834), ('err', 0.10675569259947548), ('ioe', 0.05339357477617512), ('thrownException', 0.05337530414895306), ('e1', 0.0533744558043369), ('npe', 0.05337180399761211), ('buildRule', 0.00030967754931566745), ('name', 0.00030016607547126296)]
            }

            String msg = message.toString();
// msg                  2	: [('antRun', 0.09401024030451431), ('name', 0.059638714805299205), ('msg', 0.05221161946452842), ('s', 0.04538728557451872), ('prefix', 0.04410722172740305), ('output', 0.043055754100087315), ('label', 0.04276720093319899), ('versionStr', 0.04274723600899722), ('remotePath', 0.042744067805185575), ('totalChecksum', 0.042733819870492504)]
// message              No	: [('name', 0.0025032231487833864), ('project', 0.0024261994355476504), ('helper', 0.0022742386551920482), ('eyeOhEx', 0.0022326314354612522), ('msg', 0.0008808241437920062), ('currentValue', 0.0008695309712617618), ('buildRule', 0.00034472695396137203), ('b', 0.0002779824025776284), ('value', 0.0002548652700392602), ('resources', 1.5259423053044718e-05)]
            if (priority != Project.MSG_ERR) {
// priority             No	: [('t', 0.012504324694739251), ('task', 0.011674765348011566), ('c', 0.011272044306068093), ('params', 0.010708762803209601), ('ch', 0.010453806303477345), ('name', 0.010010210383357481), ('isUnixStyle', 0.009714358461915562), ('classpath', 0.009472876520041215), ('s', 0.009155859126646985), ('parent', 0.009067442287803753)]
// MSG_ERR              4	: [('MSG_VERBOSE', 0.195472370692694), ('MSG_WARN', 0.09319970678026526), ('MSG_DEBUG', 0.08226560312365923), ('MSG_INFO', 0.057740018687253356), ('MSG_ERR', 0.049806115370946515), ('ant', 0.0220552863087958), ('junit', 0.007154628310001671), ('types', 0.0059857662178087615), ('length', 0.00547723345570092), ('equals', 0.004274290315554436)]
                printMessage(msg, out, priority);
// msg                  1	: [('be', 0.6389130374088141), ('msg', 0.027961137387190197), ('exc', 0.027799380096175625), ('buildRule', 0.0006193550986313349), ('name', 0.0006003321509425259), ('project', 0.00047616282491606886), ('file', 0.0004143952868490221), ('p', 0.0003934795496213384), ('s', 0.00029298687578128724), ('f', 0.0002787196301464933)]
// out                  0	: [('out', 0.5080175654573024), ('ioe', 0.05881121275849516), ('msgLevel', 0.017009008271723795), ('shouldBeEqual', 0.01564489235771963), ('e', 0.012457052317822561), ('o', 0.007888942589501432), ('inputFile', 0.007827761124025773), ('msg', 0.003968628273554266), ('ncdfe', 0.0039200702626515475), ('buildRule', 0.0009012058558256291)]
// priority             No	: [('event', 0.7804002602122886), ('indent', 0.030363621920775026), ('in', 0.02279143179194588), ('newBuffer', 0.015183977308674948), ('message', 0.007635691915505093), ('localFile', 0.007600138149374914), ('err', 0.0058227757202726355), ('buildRule', 0.00045060292791281454), ('l', 0.00037704214952320655), ('e', 0.0003678659264041523)]
            } else {
                printMessage(msg, err, priority);
// msg                  1	: [('be', 0.2778260748176281), ('msg', 0.055922274774380394), ('exc', 0.05559876019235125), ('buildRule', 0.0012387101972626698), ('name', 0.0012006643018850518), ('project', 0.0009523256498321377), ('file', 0.0008287905736980442), ('p', 0.0007869590992426768), ('s', 0.0005859737515625745), ('f', 0.0005574392602929866)]
// err                  No	: [('out', 0.5080175654573024), ('ioe', 0.05881121275849516), ('msgLevel', 0.017009008271723795), ('shouldBeEqual', 0.01564489235771963), ('e', 0.012457052317822561), ('o', 0.007888942589501432), ('inputFile', 0.007827761124025773), ('msg', 0.003968628273554266), ('ncdfe', 0.0039200702626515475), ('buildRule', 0.0009012058558256291)]
// priority             No	: [('args', 0.38619833333784737), ('input', 0.09646469245807159), ('err', 0.02509522659243075), ('buildRule', 0.0018024117116512582), ('l', 0.0015081685980928262), ('e', 0.0014714637056166093), ('p', 0.001423295613484031), ('name', 0.0011824551528211396), ('s', 0.0010818140274947697), ('value', 0.0010794830850095662)]
            }
            log(msg);
// log                  0	: [('log', 0.018432029486084897), ('cmd', 0.005727833012031778), ('commandLine', 0.004635644384338322), ('out', 0.0034835895340697724), ('sb', 0.0033701767991048495), ('writer', 0.003323112394339467), ('buf', 0.0022681961185887604), ('ds', 0.0019355660850308193), ('result', 0.001824540556784192), ('project', 0.0015682831021688385)]
// msg                  0	: [('msg', 0.1015504341485746), ('message', 0.061937243555789945), ('TIMEOUT_MESSAGE', 0.02219050097376093), ('e', 0.015464967576400162), ('toExecute', 0.014763417176762019), ('FAIL_MSG', 0.0147540034088489), ('t', 0.007573612058854867), ('commandline', 0.007498353842389524), ('ioe', 0.007399161468988763), ('errorMessage', 0.00738041357494018)]
        }
    }

    /**
     * Convenience method to format a specified length of time.
     *
     * @param millis Length of time to format, in milliseconds.
     *
     * @return the time as a formatted string.
     *
     * @see DateUtils#formatElapsedTime(long)
     */
    protected static String formatTime(final long millis) {
// millis               No	: [('value', 0.15929319388036448), ('timeout', 0.07929043654667167), ('size', 0.042259120129851675), ('skip', 0.041246524143546355), ('lines', 0.039129104779305625), ('start', 0.027896761148302734), ('granularity', 0.026340444916766733), ('len', 0.021074196306578755), ('maxTime', 0.01956398455292055), ('n', 0.0193651570469678)]
        return DateUtils.formatElapsedTime(millis);
// millis               No	: [('buildRule', 0.0024774203945253396), ('name', 0.0024013286037701037), ('project', 0.0019046512996642756), ('file', 0.0016575811473960884), ('p', 0.0015739181984853537), ('s', 0.001171947503125149), ('value', 0.001121263874944332), ('f', 0.0011148785205859731), ('e', 0.0010877128100074773), ('r', 0.0009954077500873872)]
    }

    /**
     * Prints a message to a PrintStream.
     *
     * @param message  The message to print.
     *                 Should not be <code>null</code>.
     * @param stream   A PrintStream to print the message to.
     *                 Must not be <code>null</code>.
     * @param priority The priority of the message.
     *                 (Ignored in this implementation.)
     */
    protected void printMessage(final String message,
// message              0	: [('message', 0.754997370927123), ('name', 0.021621081498663874), ('value', 0.005432536747319693), ('output', 0.0038969887075381527), ('s', 0.0038167379938776206), ('pattern', 0.0033490830744499762), ('line', 0.003108594072524508), ('text', 0.0025897969904577264), ('classname', 0.0022937857853270725), ('resources', 4.945891699909404e-06)]
                                final PrintStream stream,
// stream               0	: [('stream', 0.784405304971445), ('s', 0.06881389370154799), ('ps2', 0.034400473370267325), ('out', 0.019730410899560326), ('tmpErr', 0.006300381146605782), ('tmpOut', 0.006300328052087345), ('err', 0.005409833615300647), ('output', 0.0036763772301113846), ('resources', 4.945891699909404e-06), ('junit', 4.547682811632164e-06)]
                                final int priority) {
// priority             0	: [('priority', 0.759585740528467), ('offset', 0.022036506713690535), ('length', 0.02044351760962462), ('len', 0.006926974747504733), ('mode', 0.006260170422106346), ('alphaSize', 0.006252982326240026), ('msgLevel', 0.006087153960047502), ('off', 0.005343910749295172), ('level', 0.004827561284711278), ('i', 0.004767173418375155)]
        stream.println(message);
// stream               No	: [('buildRule', 0.005257464168969087), ('log', 0.0028584948719952074), ('thrown', 0.0013508664637586231), ('cmd', 0.0008913433421853194), ('out', 0.00047642506318555357), ('project', 0.00046872567617739204), ('sb', 0.0004198246900944068), ('result', 0.00028877432725253784), ('s', 0.00028118100353122233), ('buf', 0.0002527153571218747)]
// message              1	: [('strmessage', 0.50194485076718), ('message', 0.027397712113501265), ('msg', 0.021550854913259608), ('dirListing', 0.009718932666692366), ('key', 0.007902388950407433), ('sb', 0.005880828206077668), ('name', 0.0044853312970965595), ('e', 0.004156927348655903), ('line', 0.0040873479103056614), ('parserType', 0.0038884110629468895)]
    }

    /**
     * Empty implementation which allows subclasses to receive the
     * same output that is generated here.
     *
     * @param message Message being logged. Should not be <code>null</code>.
     */
    protected void log(String message) {
// log                  2	: [('validate', 0.2122288993051672), ('zipFile', 0.14997296662323262), ('log', 0.12332031697088872), ('execute', 0.08634240325286846), ('setup', 0.07297014595202712), ('tearDown', 0.07256323827818476), ('run', 0.0724947286830463), ('add', 0.00043899338901386164), ('resources', 4.945891699909404e-06), ('junit', 4.547682811632164e-06)]
// message              0	: [('message', 0.6440068414737337), ('msg', 0.17552830991485371), ('line', 0.017129950313015313), ('mesg', 0.015859466522340274), ('name', 0.006430563194572035), ('value', 0.002602803896956515), ('s', 0.0024332671553228655), ('target', 0.0013616782761231181), ('uri', 0.0012240715536199777), ('resources', 4.945891699909404e-06)]
    }

    /**
     * Get the current time.
     * @return the current time as a formatted string.
     * @since Ant1.7.1
     */
    protected String getTimestamp() {
        Date date = new Date(System.currentTimeMillis());
// date                 4	: [('start', 0.2902250715735923), ('now', 0.28745891717777594), ('fromModTime', 0.14304308636119287), ('d', 0.043052855752585245), ('date', 0.015115656723822389), ('time', 0.005500484486511522), ('t', 0.002782858480546601), ('endDate', 0.002750470824300052), ('resources', 1.9783566799637617e-05), ('junit', 1.8190731246528655e-05)]
        DateFormat formatter = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT);
// formatter            No	: [('df', 0.5568271665091613), ('dateFormat', 0.02273349650329359), ('fmt', 0.01137134678617346), ('DATE_HEADER_FORMAT_INT', 0.011369860139657226), ('DATE_HEADER_FORMAT', 0.011369010627362234), ('resources', 3.9567133599275234e-05), ('junit', 3.638146249305731e-05), ('srcDir', 2.9160607985630027e-05), ('separator', 2.8523473764386443e-05), ('expected', 2.7461583395647136e-05)]
// SHORT                0	: [('SHORT', 0.7500137056526593), ('ant', 0.0110276431543979), ('junit', 0.003577314155000836), ('types', 0.0029928831089043807), ('length', 0.00273861672785046), ('equals', 0.002137145157777218), ('append', 0.001925371290121741), ('add', 0.00186726898830283), ('setValue', 0.0017936622179314408), ('getProperty', 0.0017697818195696042)]
// SHORT                0	: [('SHORT', 0.5000274113053187), ('ant', 0.0220552863087958), ('junit', 0.007154628310001671), ('types', 0.0059857662178087615), ('length', 0.00547723345570092), ('equals', 0.004274290315554436), ('append', 0.0038507425802434816), ('add', 0.0037345379766056596), ('setValue', 0.0035873244358628816), ('getProperty', 0.0035395636391392085)]
        return formatter.format(date);
// formatter            No	: [('result', 0.04317707677948621), ('newFilter', 0.015917933788524578), ('p', 0.013221032845062257), ('cmd', 0.012064711150104997), ('commandLine', 0.010002237015831823), ('buf', 0.009421695085239382), ('mapperElement', 0.009007248716753872), ('c', 0.008268700215254101), ('exe', 0.007997727307658005), ('tool', 0.007960894499896565)]
// format               No	: [('ant', 0.0220552863087958), ('junit', 0.007154628310001671), ('types', 0.0059857662178087615), ('length', 0.00547723345570092), ('equals', 0.004274290315554436), ('append', 0.0038507425802434816), ('add', 0.0037345379766056596), ('setValue', 0.0035873244358628816), ('getProperty', 0.0035395636391392085), ('MSG_VERBOSE', 0.002332922519688775)]
// date                 1	: [('format', 0.06475523019568434), ('date', 0.024921082206394045), ('cal', 0.019942560242107648), ('d', 0.015025133102331025), ('suite', 0.014971138931145883), ('entry', 0.010188528594346182), ('pattern', 0.005136499365024036), ('seconds', 0.004989166267841913), ('duration', 0.004985879078414129), ('startDate', 0.004983545254960557)]
    }

    /**
     * Get the project name or null
     * @param event the event
     * @return the project that raised this event
     * @since Ant1.7.1
     */
    protected String extractProjectName(BuildEvent event) {
// event                0	: [('event', 0.7292874396636042), ('actual', 0.002192603182590449), ('expected', 0.0011191646401642061), ('be', 0.0011042981750018558), ('resources', 3.9567133599275234e-05), ('junit', 3.638146249305731e-05), ('srcDir', 2.9160607985630027e-05), ('separator', 2.8523473764386443e-05), ('values', 2.342639999443777e-05)]
        Project project = event.getProject();
// project              0	: [('project', 0.7830206444802158), ('p', 0.11314643421495213), ('prj', 0.02347539224488999), ('subProject', 0.01167979998148991), ('aProj', 0.0056509104554269066), ('expectedProject', 0.002734685641004849), ('resources', 4.945891699909404e-06), ('junit', 4.547682811632164e-06), ('srcDir', 3.6450759982037534e-06), ('separator', 3.5654342205483054e-06)]
// event                1	: [('task', 0.35248133605739673), ('event', 0.3453477030258631), ('project', 0.03260381608576704), ('context', 0.011965095687419247), ('buildRule', 0.007467234076468495), ('p', 0.006012334190547837), ('helper', 0.006009547613103746), ('owner', 0.0059807148398849895), ('testExecutionContext', 0.005972225089469515), ('javah', 0.0059682058659651345)]
        return (project != null) ? project.getName() : null;
// project              No	: [('file', 0.11889406633029319), ('c', 0.11312454568966974), ('myName', 0.11237544333213378), ('lhsKey', 0.11237544333213378), ('parseableExtraFields', 0.11237541678487457), ('allExtraFieldsNoCopy', 0.11237541678487457), ('bytes', 0.0290539106846856), ('includePatterns', 0.029042746549182298), ('name', 0.006613297388602576), ('other', 0.001936031872490735)]
// project              No	: [('message', 0.1305463176327267), ('destDir', 0.12983692538170194), ('file', 0.06598637073512457), ('data', 0.06496351414250774), ('value', 0.06490884148596222), ('vmLauncher', 0.06480733946415529), ('device', 0.06480707399156312), ('clazz', 0.019419968394824193), ('other', 0.0038196811284481147), ('components', 0.0036698777923080987)]
    }
}
