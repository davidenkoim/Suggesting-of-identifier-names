// Path id: 45
// Path to file: C:\Users\Igor\IdeaProjects\SLP-Core-0.3\java-projects\ant-master\src\main\org\apache\tools\ant\DemuxOutputStream.java
// Number of identifiers: 138	Accuracy: 34.06%	MRR: 37.75%
// True 	Rank of true in predictions : [(predicted token, probability of a token), ...]

/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package org.apache.tools.ant;
// ant                  0	: [('ant', 0.9196174020357146), ('zip', 0.020561238304556716), ('junit', 0.0008939379046487885), ('types', 0.0007478938230006481), ('length', 0.0006860469306543525), ('equals', 0.0005340527042824871), ('append', 0.00048795351371125236), ('add', 0.0004666131351803974), ('getProperty', 0.0004422522865228212), ('resources', 0.00015627170445219017)]

import java.io.ByteArrayOutputStream;
// java                 0	: [('java', 0.6107254228583503), ('junit', 0.001000726159505422), ('jdepend', 1.7460533420911956e-05), ('resources', 4.943953674245345e-06), ('srcDir', 3.643727806437451e-06), ('separator', 3.5641221410614574e-06), ('expected', 3.431446032101468e-06), ('values', 2.9272768180535095e-06), ('os', 2.6088541565495358e-06)]
import java.io.IOException;
// java                 0	: [('java', 0.9382254228583502), ('junit', 0.001000726159505422), ('jdepend', 1.7460533420911956e-05), ('resources', 4.943953674245345e-06), ('srcDir', 3.643727806437451e-06), ('separator', 3.5641221410614574e-06), ('expected', 3.431446032101468e-06), ('values', 2.9272768180535095e-06), ('os', 2.6088541565495358e-06)]
import java.io.OutputStream;
// java                 0	: [('java', 0.9361962020791295), ('junit', 0.001000726159505422), ('jdepend', 1.7460533420911956e-05), ('resources', 4.943953674245345e-06), ('srcDir', 3.643727806437451e-06), ('separator', 3.5641221410614574e-06), ('expected', 3.431446032101468e-06), ('values', 2.9272768180535095e-06), ('os', 2.6088541565495358e-06)]
import java.util.WeakHashMap;
// java                 0	: [('java', 0.9058180154509428), ('junit', 0.03340813356691283), ('jdepend', 1.7460533420911956e-05), ('resources', 4.943953674245345e-06), ('srcDir', 3.643727806437451e-06), ('separator', 3.5641221410614574e-06), ('expected', 3.431446032101468e-06), ('values', 2.9272768180535095e-06), ('os', 2.6088541565495358e-06)]

import org.apache.tools.ant.util.FileUtils;
// ant                  0	: [('ant', 0.9196174020357146), ('zip', 0.020561238304556716), ('junit', 0.0008939379046487885), ('types', 0.0007478938230006481), ('length', 0.0006860469306543525), ('equals', 0.0005340527042824871), ('append', 0.00048795351371125236), ('add', 0.0004666131351803974), ('getProperty', 0.0004422522865228212), ('resources', 0.00015627170445219017)]

/**
 * Logs content written by a thread and forwards the buffers onto the
 * project object which will forward the content to the appropriate
 * task.
 *
 * @since 1.4
 */
public class DemuxOutputStream extends OutputStream {

    /**
     * A data class to store information about a buffer. Such information
     * is stored on a per-thread basis.
     */
    private static class BufferInfo {
        /**
         * The per-thread output stream.
         */
        private ByteArrayOutputStream buffer;
// buffer               2	: [('bos', 0.17638226476689056), ('out', 0.17405442817126038), ('buffer', 0.16914762564096056), ('baos', 0.016998212907153823), ('stdout', 0.009718145481515922), ('stderr', 0.009716022663772562), ('sb', 0.002487751991072642), ('stream', 0.0024718308579974434), ('resources', 3.955162939396276e-05), ('junit', 3.636740277892302e-05)]

        /**
         * Indicates we have just seen a carriage return. It may be part of
         * a crlf pair or a single cr invoking processBuffer twice.
         */
         private boolean crSeen = false;
// crSeen               No	: [('verbose', 0.016173102753757572), ('failOnError', 0.015153115302744742), ('preserveLastModified', 0.012073783700111234), ('debug', 0.009361606704922268), ('quiet', 0.008875052279578109), ('caseSensitive', 0.007979470059673872), ('force', 0.007801971876608459), ('append', 0.007685055542963568), ('followSymlinks', 0.0067766359925727476), ('cache', 0.006472249949329392)]
    }

    /** Maximum buffer size. */
    private static final int MAX_SIZE = 1024;
// MAX_SIZE             No	: [('BUFFER_SIZE', 0.07255393745159269), ('DEFAULT_BUFFER_SIZE', 0.05140459339863857), ('SETMASK', 0.05140459339863857), ('SMALL_THRESH', 0.051404540328194984), ('SUCCESS', 0.051084161474243946), ('STATE_NORMAL', 0.051074749273602234), ('MIN_EOCD_SIZE', 0.05107469620315865), ('MAX_REPORT_NESTED_TEXT', 0.05107466966793686), ('CFH_LEN', 0.051074643132715064), ('FALLBACK_QSORT_SMALL_THRESH', 0.051074643132715064)]

    /** Initial buffer size. */
    private static final int INITIAL_SIZE = 132;
// INITIAL_SIZE         No	: [('BUFFER_SIZE', 0.03588727078492603), ('WORD', 0.014590614841948997), ('BYTE_MASK', 0.014515326980797336), ('BYTE_1_SHIFT', 0.009889332104545765), ('BYTE_2_MASK', 0.006593111997352421), ('CODE_553', 0.006593111997352421), ('CODE_550', 0.006593111997352421), ('POS_3', 0.006593085462130629), ('POS_2', 0.006593058926908838), ('DEFAULT_NUM_LINES', 0.006593058926908838)]

    /** Carriage return */
    private static final int CR = 0x0d;
// CR                   No	: [('BUFFER_SIZE', 0.03588727078492603), ('WORD', 0.014590614841948997), ('BYTE_MASK', 0.014515326980797336), ('BYTE_1_SHIFT', 0.009889332104545765), ('BYTE_2_MASK', 0.006593111997352421), ('CODE_553', 0.006593111997352421), ('CODE_550', 0.006593111997352421), ('POS_3', 0.006593085462130629), ('POS_2', 0.006593058926908838), ('DEFAULT_NUM_LINES', 0.006593058926908838)]

    /** Linefeed */
    private static final int LF = 0x0a;
// LF                   No	: [('BUFFER_SIZE', 0.03588727078492603), ('WORD', 0.014590614841948997), ('BYTE_MASK', 0.014515326980797336), ('BYTE_1_SHIFT', 0.009889332104545765), ('BYTE_2_MASK', 0.006593111997352421), ('CODE_553', 0.006593111997352421), ('CODE_550', 0.006593111997352421), ('POS_3', 0.006593085462130629), ('POS_2', 0.006593058926908838), ('DEFAULT_NUM_LINES', 0.006593058926908838)]

    /** Mapping from thread to buffer (Thread to BufferInfo). */
    private WeakHashMap<Thread, BufferInfo> buffers = new WeakHashMap<>();
// buffers              No	: [('c', 0.010126666827797438), ('files', 0.008850326766887181), ('iterator', 0.007565919998552157), ('clazz', 0.006747010411945275), ('stk', 0.006161910825074141), ('list', 0.0049535009319514), ('result', 0.004676934529382284), ('filterChains', 0.004512628436046233), ('map', 0.004342502968611278), ('entry', 0.004162612539556867)]

    /**
     * The project to send output to.
     */
    private Project project;
// project              0	: [('project', 0.6573924141996943), ('p', 0.2109079426573224), ('newProject', 0.0657656828832276), ('fallback', 0.004884233194675112), ('owner', 0.001191617186225667), ('taskProject', 0.001174675709357756), ('aProj', 0.00021544472655942338), ('prj', 0.00018288853391320155), ('resources', 4.943953674245345e-06), ('junit', 4.5459253473653775e-06)]

    /**
     * Whether or not this stream represents an error stream.
     */
    private boolean isErrorStream;
// isErrorStream        No	: [('parentFirst', 0.7508694567197177), ('verbose', 0.004043275688439393), ('failOnError', 0.0037882788256861856), ('preserveLastModified', 0.0030184459250278085), ('debug', 0.002340401676230567), ('quiet', 0.002218763069894527), ('caseSensitive', 0.001994867514918468), ('force', 0.001950492969152115), ('append', 0.001921263885740892), ('followSymlinks', 0.0016941589981431869)]

    /**
     * Creates a new instance of this class.
     *
     * @param project The project instance for which output is being
     *                demultiplexed. Must not be <code>null</code>.
     * @param isErrorStream <code>true</code> if this is the error string,
     *                      otherwise a normal output stream. This is
     *                      passed to the project so it knows
     *                      which stream it is receiving.
     */
    public DemuxOutputStream(Project project, boolean isErrorStream) {
// project              0	: [('project', 0.27314507334634813), ('p', 0.20074227958251895), ('other', 0.0049495998506292535), ('containingProject', 0.004656246634437402), ('fallback', 0.0025958240483996337), ('newProject', 0.0024679343773324424), ('owner', 0.0024666606866864263), ('aProj', 0.0017235578124753872), ('resources', 3.955162939396276e-05), ('junit', 3.636740277892302e-05)]
// isErrorStream        No	: [('force', 0.37648969816167266), ('printSubTargets', 0.3756130871422696), ('overwrite', 0.00950867438811087), ('preserveLastModified', 0.00739340796430163), ('append', 0.004302663855123731), ('verbose', 0.003621629614745843), ('haltOnFailure', 0.0033700198874417947), ('haltOnError', 0.003347739741282346), ('isCaseSensitive', 0.0033469967550721702), ('fast', 0.0025594532498633134)]
        this.project = project;
// project              4	: [('name', 0.02752656676268356), ('value', 0.017440690604640593), ('classpath', 0.016616798280726194), ('file', 0.013938959151057454), ('project', 0.012173705611078193), ('encoding', 0.011716136960338401), ('destDir', 0.008075306697776268), ('task', 0.00688554478114147), ('dir', 0.006296477803158423), ('verbose', 0.006123403573410662)]
// project              0	: [('project', 0.8093888852061952), ('p', 0.06791129678529802), ('task', 0.016443643595186165), ('target', 0.01292411973562334), ('other', 0.012923846661839725), ('event', 0.0035667808288807746), ('buildRule', 0.002659428053389125), ('component', 0.002326247825221418), ('b', 0.00027770403336197994), ('name', 0.0002733918453328443)]
        this.isErrorStream = isErrorStream;
// isErrorStream        No	: [('target', 0.14352700792048576), ('basedir', 0.14248784258546088), ('parent', 0.1421004100398684), ('buildFile', 0.14196851434007832), ('expanders', 0.14192643986762202), ('description', 0.041968355128747574), ('name', 0.003450371848374502), ('file', 0.003316659481931715), ('writer', 0.003315990570410849), ('bsLive', 0.002338401028727646)]
// isErrorStream        No	: [('buildRule', 0.005513811817188965), ('b', 0.004443264533791679), ('name', 0.004374269525325509), ('value', 0.004076473004260019), ('p', 0.003603540587560368), ('file', 0.0033849756649105517), ('project', 0.0031067786837397585), ('line', 0.002766595424462859), ('FILE_UTILS', 0.002608904874459117), ('path', 0.0024582005029410285)]
    }

    /**
     * Returns the buffer associated with the current thread.
     *
     * @return a BufferInfo for the current thread to write data to
     */
    private BufferInfo getBufferInfo() {
        Thread current = Thread.currentThread();
// current              No	: [('currentThread', 0.5733947314132245), ('t', 0.045285652546299654), ('timeoutThread', 0.036697825207803625), ('self', 0.005447878278247207), ('thread', 0.0040209520334268814), ('client', 0.0031283071723440755), ('inputThread', 0.0008944129905629461), ('result', 0.0004709639212062449), ('resources', 9.88790734849069e-06), ('junit', 9.091850694730755e-06)]
// currentThread        0	: [('currentThread', 0.6492781507441315), ('interrupted', 0.012106017040246468), ('ant', 0.011025005806285976), ('junit', 0.003575751618595154), ('types', 0.0029915752920025925), ('length', 0.00274418772261741), ('equals', 0.0021362108171299483), ('append', 0.0019518140548450092), ('add', 0.0018664525407215897), ('getProperty', 0.001769009146091285)]
        return buffers.computeIfAbsent(current, x -> {
// buffers              No	: [('currentThread', 0.5016861253329306), ('result', 0.015094910815550356), ('p', 0.007612538754464197), ('name', 0.007464003227854668), ('selectorsList', 0.006996622077484179), ('w', 0.006749250362582501), ('matchDirEntries', 0.005056422122759183), ('matchFileEntries', 0.005056395587537391), ('classpath', 0.003793418104729765), ('resource', 0.0034196725274061816)]
// current              No	: [('name', 0.13110204201335923), ('value', 0.08716156986127707), ('f', 0.043857723700504204), ('prefix', 0.04346150556480655), ('className', 0.043456835365771156), ('element', 0.043448140152409956), ('base', 0.043428422965556435), ('baseDir', 0.04341623066250974), ('date', 0.043342666179658526), ('processor', 0.043328038195798016)]
// x                    No	: [('in', 0.21676702805628514), ('previous', 0.21668472792730373), ('buildRule', 0.0018008968942687352), ('l', 0.0015069105113218952), ('e', 0.0014703489547772716), ('p', 0.0014221200505767878), ('name', 0.0011817185157845453), ('s', 0.0010809254226380488), ('value', 0.001078598473052972), ('result', 0.0010276915968754313)]
            BufferInfo bufferInfo = new BufferInfo();
// bufferInfo           No	: [('resources', 0.00015820651757585103), ('junit', 0.00014546961111569208), ('srcDir', 0.00011659928980599843), ('separator', 0.00011405190851396664), ('expected', 0.00010980627302724698), ('values', 9.36728581777123e-05), ('os', 8.348333300958514e-05), ('token', 7.584118913348976e-05), ('entries', 7.499206203614585e-05), ('localFile', 6.225515557598687e-05)]
            bufferInfo.buffer = new ByteArrayOutputStream(INITIAL_SIZE);
// bufferInfo           No	: [('buildRule', 0.012269920741779773), ('project', 0.007755650189475726), ('compareFiles', 0.006736021953545771), ('log', 0.006483090073861194), ('out', 0.006252402342518162), ('i', 0.0055247234415399405), ('ds', 0.005383459056854621), ('p', 0.0045273027599462435), ('fs', 0.0031853662327672384), ('stream', 0.0023628001899563974)]
// buffer               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
// INITIAL_SIZE         0	: [('INITIAL_SIZE', 0.6587511752572308), ('uri', 0.1587923567858829), ('buildRule', 0.0003094657106501729), ('name', 0.0003000203072613726), ('project', 0.0002382934402892186), ('file', 0.00020706122991142562), ('p', 0.00019660843737202212), ('s', 0.00014639646675983277), ('value', 0.00014006566793364474), ('f', 0.00013926752643324118)]
            bufferInfo.crSeen = false;
// bufferInfo           No	: [('buildRule', 0.0017814719549922684), ('thrown', 0.0012451516972309903), ('ds', 0.0008314614720325852), ('log', 0.0007062777768100629), ('out', 0.0006771838046510311), ('s', 0.0005723235336671584), ('cmd', 0.0004965340432738528), ('project', 0.0004814365528559001), ('p', 0.0004745325944218605), ('commandLine', 0.00043888430308637084)]
// crSeen               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
            return bufferInfo;
// bufferInfo           No	: [('parseProperties', 0.3751577825387466), ('FLAG_SKIP_WRITABLE', 0.37515719876386716), ('result', 0.007585503053690923), ('newFilter', 0.0024944429580237236), ('p', 0.0021705542930465674), ('cmd', 0.0019339468979734551), ('c', 0.0017434646332959989), ('buf', 0.0016370012039390017), ('commandLine', 0.0015857855145587738), ('mapperElement', 0.0014298241757358756)]
        });
    }

    /**
     * Resets the buffer for the current thread.
     */
    private void resetBufferInfo() {
        Thread current = Thread.currentThread();
// current              No	: [('currentThread', 0.5733947314132245), ('t', 0.045285652546299654), ('timeoutThread', 0.036697825207803625), ('self', 0.005447878278247207), ('thread', 0.0040209520334268814), ('client', 0.0031283071723440755), ('inputThread', 0.0008944129905629461), ('result', 0.0004709639212062449), ('resources', 9.88790734849069e-06), ('junit', 9.091850694730755e-06)]
// currentThread        0	: [('currentThread', 0.6492781507441315), ('interrupted', 0.012106017040246468), ('ant', 0.011025005806285976), ('junit', 0.003575751618595154), ('types', 0.0029915752920025925), ('length', 0.00274418772261741), ('equals', 0.0021362108171299483), ('append', 0.0019518140548450092), ('add', 0.0018664525407215897), ('getProperty', 0.001769009146091285)]
        BufferInfo bufferInfo = buffers.get(current);
// bufferInfo           No	: [('resources', 0.00015820651757585103), ('junit', 0.00014546961111569208), ('srcDir', 0.00011659928980599843), ('separator', 0.00011405190851396664), ('expected', 0.00010980627302724698), ('values', 9.36728581777123e-05), ('os', 8.348333300958514e-05), ('token', 7.584118913348976e-05), ('entries', 7.499206203614585e-05), ('localFile', 6.225515557598687e-05)]
// buffers              No	: [('buildRule', 0.005513811817188965), ('b', 0.004443264533791679), ('name', 0.004374269525325509), ('value', 0.004076473004260019), ('p', 0.003603540587560368), ('file', 0.0033849756649105517), ('project', 0.0031067786837397585), ('line', 0.002766595424462859), ('FILE_UTILS', 0.002608904874459117), ('path', 0.0024582005029410285)]
// get                  No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
// current              No	: [('name', 0.05132254982977496), ('i', 0.042194806417957746), ('key', 0.024323390378578006), ('index', 0.01454497523766885), ('f', 0.012586462569908037), ('testIdentifier', 0.0120995996079117), ('type', 0.010197099530701605), ('publicId', 0.01008028794159187), ('elementName', 0.010069687751852695), ('className', 0.008175776747116635)]
        FileUtils.close(bufferInfo.buffer);
// bufferInfo           No	: [('out', 0.07885658159196951), ('is', 0.06199205607582674), ('process', 0.05293704846413324), ('err', 0.04862907661374708), ('newJarStream', 0.048615771916231766), ('writer', 0.028636232089295464), ('fis', 0.028622052424409895), ('outputStream', 0.02574769453926309), ('errorStream', 0.024310368422768375), ('filein', 0.024307718375333583)]
// buffer               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
        bufferInfo.buffer = new ByteArrayOutputStream();
// bufferInfo           No	: [('buildRule', 0.0071258878199690736), ('thrown', 0.004980606788923961), ('ds', 0.003325845888130341), ('log', 0.0028251111072402518), ('out', 0.0027087352186041243), ('s', 0.0022892941346686338), ('cmd', 0.001986136173095411), ('project', 0.0019257462114236), ('p', 0.0018981303776874421), ('commandLine', 0.0017555372123454834)]
// buffer               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
        bufferInfo.crSeen = false;
// bufferInfo           No	: [('buildRule', 0.006134960370889887), ('project', 0.0038778250947378626), ('compareFiles', 0.0033680109767728855), ('log', 0.003241545036930597), ('out', 0.003126201171259081), ('i', 0.0027623617207699703), ('ds', 0.0026917295284273105), ('p', 0.0022636513799731217), ('fs', 0.0015926831163836192), ('stream', 0.0011814000949781987)]
// crSeen               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
    }

    /**
     * Removes the buffer for the current thread.
     */
    private void removeBuffer() {
        Thread current = Thread.currentThread();
// current              No	: [('currentThread', 0.5733947314132245), ('t', 0.045285652546299654), ('timeoutThread', 0.036697825207803625), ('self', 0.005447878278247207), ('thread', 0.0040209520334268814), ('client', 0.0031283071723440755), ('inputThread', 0.0008944129905629461), ('result', 0.0004709639212062449), ('resources', 9.88790734849069e-06), ('junit', 9.091850694730755e-06)]
// currentThread        0	: [('currentThread', 0.6492781507441315), ('interrupted', 0.012106017040246468), ('ant', 0.011025005806285976), ('junit', 0.003575751618595154), ('types', 0.0029915752920025925), ('length', 0.00274418772261741), ('equals', 0.0021362108171299483), ('append', 0.0019518140548450092), ('add', 0.0018664525407215897), ('getProperty', 0.001769009146091285)]
        buffers.remove(current);
// buffers              No	: [('task', 0.18805459000336985), ('currentThread', 0.1875331926483414), ('buildRule', 0.0030674801854449433), ('project', 0.0019389125473689315), ('compareFiles', 0.0016840054883864428), ('log', 0.0016207725184652984), ('out', 0.0015631005856295405), ('i', 0.0013811808603849851), ('p', 0.0011318256899865609), ('fs', 0.0007963415581918096)]
// remove               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
// current              No	: [('O', 0.07736375291434675), ('key', 0.06137754314544403), ('name', 0.03983233505117273), ('process', 0.02904450365121922), ('event', 0.01952985145054344), ('K1', 0.019360362894990386), ('thread', 0.019349025278632085), ('passedTokens', 0.019327188053830727), ('f', 0.010215133561264775), ('url', 0.009771942269075625)]
    }

    /**
     * Writes the data to the buffer and flushes the buffer if a line
     * separator is detected or if the buffer has reached its maximum size.
     *
     * @param cc data to log (byte).
     * @exception IOException if the data cannot be written to the stream
     */
    @Override
    public void write(int cc) throws IOException {
// cc                   2	: [('b', 0.7526664734516958), ('c', 0.09040811621072965), ('cc', 0.034202117948790946), ('i', 0.03171365588996602), ('j', 0.0027473308263918465), ('t', 0.002017169366625965), ('port', 0.0014981471389447344), ('index', 0.001475652562952414), ('options', 0.0011234232866361668), ('resources', 4.943953674245345e-06)]
        final byte c = (byte) cc;
// c                    0	: [('c', 0.756179763201595), ('ll_i', 0.012148126699108653), ('currentByte', 0.006466361587734056), ('b', 0.0010356011615663212), ('code', 0.0008333910466458549), ('ch', 0.0007893993515038098), ('element', 0.0003962959902698916), ('resources', 4.943953674245345e-06), ('junit', 4.5459253473653775e-06), ('srcDir', 3.643727806437451e-06)]
// cc                   0	: [('cc', 0.5133086682570142), ('i', 0.05326258226656087), ('j', 0.03992810364116404), ('b', 0.03240858310233358), ('ch', 0.016210347835980944), ('name', 0.013337565113545643), ('v', 0.01331506835234803), ('res', 0.013309198961449996), ('val', 0.013309066285341037), ('o', 3.244369067736253e-05)]

        BufferInfo bufferInfo = getBufferInfo();
// bufferInfo           No	: [('resources', 0.00015820651757585103), ('junit', 0.00014546961111569208), ('srcDir', 0.00011659928980599843), ('separator', 0.00011405190851396664), ('expected', 0.00010980627302724698), ('values', 9.36728581777123e-05), ('os', 8.348333300958514e-05), ('token', 7.584118913348976e-05), ('entries', 7.499206203614585e-05), ('localFile', 6.225515557598687e-05)]

        if (c == '\n') {
// c                    No	: [('t', 0.012430751884579467), ('task', 0.011615083626605884), ('params', 0.010641873350575126), ('file', 0.010640529279324205), ('ch', 0.010395991437718957), ('name', 0.009957764321013257), ('isUnixStyle', 0.009657355087097143), ('classpath', 0.00942087335087253), ('s', 0.009104189701250445), ('parent', 0.009015774983852703)]
            // LF is always end of line (i.e. CRLF or single LF)
            bufferInfo.buffer.write(cc);
// bufferInfo           No	: [('log', 0.42845245990791464), ('changes', 0.21281395670302453), ('lineEnd', 0.09227686813446281), ('eol', 0.046146366852280914), ('eolcount', 0.04613649416800273), ('sb', 0.01083628902933244), ('line', 0.010569485983907211), ('r', 0.01044330570795969), ('buildRule', 0.005254919586108914), ('resources', 9.269907071290904e-05)]
// buffer               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
// cc                   1	: [('b', 0.28115760223489), ('cc', 0.25178701118949104), ('buffer', 0.030291603276752017), ('root', 0.018263506298127015), ('bsBuffShadow', 0.01600244538603055), ('buf', 0.01292448457853889), ('line', 0.012628058606490166), ('writer', 0.010215209957550382), ('sb', 0.008928899526053271), ('buildRule', 0.0006189314213003458)]
            processBuffer(bufferInfo.buffer);
// bufferInfo           No	: [('buildRule', 0.0049514513704027666), ('name', 0.004800324916181962), ('project', 0.0038126950446274975), ('file', 0.0033129796785828095), ('p', 0.0031457349979523543), ('s', 0.0023423434681573243), ('value', 0.0022410506869383158), ('f', 0.002228280422931859), ('e', 0.002174405328978917), ('r', 0.0019975402360962987)]
// buffer               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
        } else {
            if (bufferInfo.crSeen) {
// bufferInfo           No	: [('classpath', 0.03780465932611516), ('task', 0.03734835487127903), ('baseDir', 0.02441607638717923), ('jarFile', 0.02420987721967162), ('loglevel', 0.024105878523521605), ('t', 0.013062922818570431), ('event', 0.01298508366170385), ('classname', 0.012455902898757676), ('url', 0.012374891182874926), ('base', 0.012256099486691934)]
// crSeen               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
                // CR without LF - send buffer then add char
                processBuffer(bufferInfo.buffer);
// bufferInfo           No	: [('buildRule', 0.0049514513704027666), ('name', 0.004800324916181962), ('project', 0.0038126950446274975), ('file', 0.0033129796785828095), ('p', 0.0031457349979523543), ('s', 0.0023423434681573243), ('value', 0.0022410506869383158), ('f', 0.002228280422931859), ('e', 0.002174405328978917), ('r', 0.0019975402360962987)]
// buffer               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
            }
            // add into buffer
            bufferInfo.buffer.write(cc);
// bufferInfo           No	: [('fileout', 0.5000805359689255), ('log', 0.009364187630607698), ('cmd', 0.0028607368212538306), ('commandLine', 0.00231521873937495), ('out', 0.0017401665884061747), ('sb', 0.0016832215583612096), ('writer', 0.0016597255195419207), ('buf', 0.0011328351633610228), ('ds', 0.0009667020726097172), ('message', 0.0008482376194416749)]
// buffer               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
// cc                   1	: [('b', 0.28115760223489), ('cc', 0.25178701118949104), ('buffer', 0.030291603276752017), ('root', 0.018263506298127015), ('bsBuffShadow', 0.01600244538603055), ('buf', 0.01292448457853889), ('line', 0.012628058606490166), ('writer', 0.010215209957550382), ('sb', 0.008928899526053271), ('buildRule', 0.0006189314213003458)]
        }
        bufferInfo.crSeen = (c == '\r');
// bufferInfo           No	: [('skip', 0.37505042823541335), ('log', 0.004682093815303849), ('cmd', 0.0014303684106269153), ('commandLine', 0.001157609369687475), ('out', 0.0008700832942030874), ('sb', 0.0008416107791806048), ('writer', 0.0008298627597709603), ('buf', 0.0005664175816805114), ('ds', 0.0004833510363048586), ('message', 0.00042411880972083744)]
// crSeen               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
// c                    No	: [('bsBuffShadow', 0.009034014819189739), ('i', 0.009024580949144491), ('bits24', 0.008971681811809655), ('message', 0.004788130688723986), ('classpath', 0.003574315119030691), ('basedir', 0.0031677090753682), ('octetString', 0.003014423938210025), ('zvec', 0.003007005195290365), ('ftab', 0.003006161627784071), ('length1', 0.003003189682943367)]
        if (!bufferInfo.crSeen && bufferInfo.buffer.size() > MAX_SIZE) {
// bufferInfo           No	: [('ftp', 0.026533051046236003), ('prefix', 0.026234553584698218), ('delete', 0.023826292499375887), ('file', 0.022754205912073593), ('f', 0.016869809356287496), ('s', 0.012115914028280774), ('doFilesonly', 0.009148916597626523), ('p', 0.009005682532856803), ('localFile', 0.008935777087028139), ('d', 0.006639919320337791)]
// crSeen               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
// bufferInfo           No	: [('file', 0.011169468226545234), ('c', 0.005223175558555135), ('index', 0.004213658266189555), ('value', 0.0040564598407901555), ('rc', 0.00387602033260457), ('out', 0.0037022639288069627), ('other', 0.003560035140001855), ('name', 0.0033364948886188553), ('args', 0.00298325801612378), ('parent', 0.0029768895628937003)]
// buffer               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
// size                 4	: [('length', 0.5964941877226174), ('append', 0.055523242626273575), ('substring', 0.018737509330129288), ('ant', 0.011025005806285976), ('size', 0.005404515128082283), ('reset', 0.004507580825805538), ('junit', 0.003575751618595154), ('types', 0.0029915752920025925), ('equals', 0.0021362108171299483), ('resources', 0.0006250868178087607)]
// MAX_SIZE             No	: [('maxLevelsOfSymlinks', 0.07589604067115316), ('lines', 0.07548503636411161), ('skip', 0.07539545486046559), ('cursor', 0.07539487108558618), ('dest', 0.009853214942077035), ('destFile', 0.009853108801189869), ('name', 0.006587649112739328), ('now', 0.006584210504680348), ('info', 0.006571959014436351), ('logLevel', 0.006558964537982178)]
            processBuffer(bufferInfo.buffer);
// bufferInfo           No	: [('buildRule', 0.0049514513704027666), ('name', 0.004800324916181962), ('project', 0.0038126950446274975), ('file', 0.0033129796785828095), ('p', 0.0031457349979523543), ('s', 0.0023423434681573243), ('value', 0.0022410506869383158), ('f', 0.002228280422931859), ('e', 0.002174405328978917), ('r', 0.0019975402360962987)]
// buffer               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
        }
    }

    /**
     * Converts the buffer to a string and sends it to the project.
     *
     * @param buffer the ByteArrayOutputStream used to collect the output
     * until a line separator is seen.
     *
     * @see Project#demuxOutput(String,boolean)
     */
    protected void processBuffer(ByteArrayOutputStream buffer) {
// buffer               7	: [('bos', 0.2597155981002239), ('baos', 0.016998212907153823), ('stdout', 0.009718145481515922), ('stderr', 0.009716022663772562), ('out', 0.0073877615045937145), ('e', 0.0025223539202894074), ('sb', 0.002487751991072642), ('buffer', 0.002480958974293891), ('stream', 0.0024718308579974434), ('resources', 3.955162939396276e-05)]
        String output = buffer.toString();
// output               No	: [('msg', 0.07636420839758506), ('name', 0.047047209745110154), ('message', 0.029267668114295424), ('s', 0.025838414257204168), ('className', 0.01502066509465382), ('path', 0.013303917440705464), ('key', 0.013142166159866535), ('value', 0.01248176248361257), ('result', 0.01178973738399883), ('uri', 0.011310331033587605)]
// buffer               No	: [('buildRule', 0.27943967744409315), ('output', 0.050146363162695384), ('bos', 0.03709475625591854), ('out', 0.01688473277866089), ('s', 0.008943093637047199), ('outputFile', 0.008379489938508419), ('b', 0.0011108161334479197), ('name', 0.0010935673813313772), ('value', 0.0010191182510650048), ('resources', 6.1016329378604605e-05)]
        project.demuxOutput(output, isErrorStream);
// project              7	: [('command', 0.1680073176805581), ('log', 0.08554934394703671), ('stream', 0.08451927147606052), ('task', 0.08448316143194129), ('map', 0.08408743117514643), ('arg2', 0.08396187021779998), ('buildRule', 0.0030674801854449433), ('project', 0.0019389125473689315), ('compareFiles', 0.0016840054883864428), ('i', 0.0013811808603849851)]
// output               No	: [('errorOutputToHandle', 0.33333994211843043), ('outputToHandle', 0.33333994211843043), ('buildRule', 0.0012378628426006916), ('name', 0.0012000812290454905), ('project', 0.0009531737611568744), ('file', 0.0008282449196457025), ('p', 0.0007864337494880885), ('s', 0.0005855858670393311), ('value', 0.0005602626717345789), ('f', 0.0005570701057329647)]
// isErrorStream        No	: [('l', 0.31412586749647603), ('f', 0.03212832630452595), ('file', 0.021667132094494283), ('realOutput', 0.02087448690664712), ('isWarning', 0.010431165307085887), ('entry', 0.0036415928721692586), ('buildRule', 0.0018008968942687352), ('e', 0.0014703489547772716), ('p', 0.0014221200505767878), ('resources', 3.4831520809598063e-05)]
        resetBufferInfo();
    }

    /**
     * Converts the buffer to a string and sends it to the project.
     *
     * @param buffer the ByteArrayOutputStream used to collect the output
     * until a line separator is seen.
     *
     * @see Project#demuxOutput(String,boolean)
     */
    protected void processFlush(ByteArrayOutputStream buffer) {
// buffer               7	: [('bos', 0.2597155981002239), ('baos', 0.016998212907153823), ('stdout', 0.009718145481515922), ('stderr', 0.009716022663772562), ('out', 0.0073877615045937145), ('e', 0.0025223539202894074), ('sb', 0.002487751991072642), ('buffer', 0.002480958974293891), ('stream', 0.0024718308579974434), ('resources', 3.955162939396276e-05)]
        String output = buffer.toString();
// output               No	: [('msg', 0.07636420839758506), ('name', 0.047047209745110154), ('message', 0.029267668114295424), ('s', 0.025838414257204168), ('className', 0.01502066509465382), ('path', 0.013303917440705464), ('key', 0.013142166159866535), ('value', 0.01248176248361257), ('result', 0.01178973738399883), ('uri', 0.011310331033587605)]
// buffer               No	: [('buildRule', 0.27943967744409315), ('output', 0.050146363162695384), ('bos', 0.03709475625591854), ('out', 0.01688473277866089), ('s', 0.008943093637047199), ('outputFile', 0.008379489938508419), ('b', 0.0011108161334479197), ('name', 0.0010935673813313772), ('value', 0.0010191182510650048), ('resources', 6.1016329378604605e-05)]
        project.demuxFlush(output, isErrorStream);
// project              7	: [('command', 0.1680073176805581), ('log', 0.08554934394703671), ('stream', 0.08451927147606052), ('task', 0.08448316143194129), ('map', 0.08408743117514643), ('arg2', 0.08396187021779998), ('buildRule', 0.0030674801854449433), ('project', 0.0019389125473689315), ('compareFiles', 0.0016840054883864428), ('i', 0.0013811808603849851)]
// output               No	: [('errorOutputToFlush', 0.33333994211843043), ('toFlush', 0.33333994211843043), ('buildRule', 0.0012378628426006916), ('name', 0.0012000812290454905), ('project', 0.0009531737611568744), ('file', 0.0008282449196457025), ('p', 0.0007864337494880885), ('s', 0.0005855858670393311), ('value', 0.0005602626717345789), ('f', 0.0005570701057329647)]
// isErrorStream        No	: [('l', 0.31412586749647603), ('f', 0.03212832630452595), ('file', 0.021667132094494283), ('realOutput', 0.02087448690664712), ('isWarning', 0.010431165307085887), ('entry', 0.0036415928721692586), ('buildRule', 0.0018008968942687352), ('e', 0.0014703489547772716), ('p', 0.0014221200505767878), ('resources', 3.4831520809598063e-05)]
        resetBufferInfo();
    }

    /**
     * Equivalent to flushing the stream.
     *
     * @exception IOException if there is a problem closing the stream.
     *
     * @see #flush
     */
    @Override
    public void close() throws IOException {
        flush();
        removeBuffer();
    }

    /**
     * Writes all remaining data in the buffer associated
     * with the current thread to the project.
     *
     * @exception IOException if there is a problem flushing the stream.
     */
    @Override
    public void flush() throws IOException {
        BufferInfo bufferInfo = getBufferInfo();
// bufferInfo           No	: [('resources', 0.00015820651757585103), ('junit', 0.00014546961111569208), ('srcDir', 0.00011659928980599843), ('separator', 0.00011405190851396664), ('expected', 0.00010980627302724698), ('values', 9.36728581777123e-05), ('os', 8.348333300958514e-05), ('token', 7.584118913348976e-05), ('entries', 7.499206203614585e-05), ('localFile', 6.225515557598687e-05)]
        if (bufferInfo.buffer.size() > 0) {
// bufferInfo           No	: [('t', 0.012430751884579467), ('task', 0.011615083626605884), ('params', 0.010641873350575126), ('file', 0.010640529279324205), ('ch', 0.010395991437718957), ('name', 0.009957764321013257), ('isUnixStyle', 0.009657355087097143), ('classpath', 0.00942087335087253), ('s', 0.009104189701250445), ('parent', 0.009015774983852703)]
// buffer               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
// size                 4	: [('length', 0.5964941877226174), ('append', 0.055523242626273575), ('substring', 0.018737509330129288), ('ant', 0.011025005806285976), ('size', 0.005404515128082283), ('reset', 0.004507580825805538), ('junit', 0.003575751618595154), ('types', 0.0029915752920025925), ('equals', 0.0021362108171299483), ('resources', 0.0006250868178087607)]
            processFlush(bufferInfo.buffer);
// bufferInfo           No	: [('buildRule', 0.0049514513704027666), ('name', 0.004800324916181962), ('project', 0.0038126950446274975), ('file', 0.0033129796785828095), ('p', 0.0031457349979523543), ('s', 0.0023423434681573243), ('value', 0.0022410506869383158), ('f', 0.002228280422931859), ('e', 0.002174405328978917), ('r', 0.0019975402360962987)]
// buffer               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
        }
    }

    /**
     * Write a block of characters to the output stream
     *
     * @param b the array containing the data
     * @param off the offset into the array where data starts
     * @param len the length of block
     *
     * @throws IOException if the data cannot be written into the stream.
     */
    @Override
    public void write(byte[] b, int off, int len) throws IOException {
// b                    0	: [('b', 0.40911326520774804), ('wBuf', 0.09764382576589782), ('data', 0.0749416496773331), ('buf', 0.07321005813143777), ('buffer', 0.0527150876056957), ('bytes', 0.051752769026871405), ('header', 0.013470018550850525), ('headerBuf', 0.011166318397849139), ('args', 0.002921670492803844), ('resources', 0.00019600460866595152)]
// off                  0	: [('off', 0.5017446831068739), ('offset', 0.3852300980909172), ('length', 0.007676648433701708), ('start', 0.004460270795836239), ('options', 0.003260812253443086), ('i', 0.0031094600040380096), ('blockSize', 0.00309306436086523), ('count', 0.002992973488937577), ('len', 0.0026654047116995375), ('pos', 0.0025631972657303445)]
// len                  0	: [('len', 0.8776654047116995), ('offset', 0.010230098090917138), ('length', 0.007676648433701708), ('start', 0.004460270795836239), ('options', 0.003260812253443086), ('i', 0.0031094600040380096), ('blockSize', 0.00309306436086523), ('count', 0.002992973488937577), ('pos', 0.0025631972657303445), ('off', 0.0017446831068739532)]
        // find the line breaks and pass other chars through in blocks
        int offset = off;
// offset               1	: [('ch', 0.12836821803428716), ('offset', 0.10277663802796219), ('result', 0.07726438666992844), ('len', 0.07719436972579882), ('c', 0.07674995010948955), ('thisChar', 0.07642132709864544), ('bsLiveShadow', 0.05101355459035699), ('count', 0.026767585758594604), ('lookAhead2', 0.02547425009008076), ('amountRead', 0.025474223554858965)]
// off                  0	: [('off', 0.1923658615966671), ('tz', 0.017363951060698095), ('offset', 0.0035140061948016055), ('written', 0.003485398835701403), ('offsetEntry', 0.003477283408874038), ('buildRule', 0.00034461323857431033), ('b', 0.00027770403336197994), ('name', 0.0002733918453328443), ('value', 0.0002547795627662512), ('p', 0.00022522128672252298)]
        int blockStartOffset = offset;
// blockStartOffset     0	: [('blockStartOffset', 0.8751335221645034), ('i', 0.003994670807727074), ('count', 0.0035899761239836904), ('index', 0.002421161296855257), ('len', 0.001759607610250262), ('start', 0.0017428794914884128), ('size', 0.0015991217131918907), ('pos', 0.0012868468045972746), ('bsBuffShadow', 0.0011969089916835333), ('exitCode', 0.0011280334786688709)]
// offset               0	: [('offset', 0.9375417839725794), ('buildRule', 0.00034461323857431033), ('b', 0.00027770403336197994), ('name', 0.0002733918453328443), ('value', 0.0002547795627662512), ('p', 0.00022522128672252298), ('file', 0.00021156097905690948), ('project', 0.0001941736677337349), ('line', 0.0001729122140289287), ('FILE_UTILS', 0.00016305655465369482)]
        int remaining = len;
// remaining            0	: [('remaining', 0.8752760500989005), ('i', 0.003994670807727074), ('count', 0.0035899761239836904), ('index', 0.002421161296855257), ('len', 0.001759607610250262), ('start', 0.0017428794914884128), ('size', 0.0015991217131918907), ('pos', 0.0012868468045972746), ('bsBuffShadow', 0.0011969089916835333), ('exitCode', 0.0011280334786688709)]
// len                  0	: [('len', 0.6823391436393247), ('length', 0.23962404915599161), ('remaining', 0.015628397189244615), ('buildRule', 0.00034461323857431033), ('b', 0.00027770403336197994), ('name', 0.0002733918453328443), ('value', 0.0002547795627662512), ('p', 0.00022522128672252298), ('file', 0.00021156097905690948), ('project', 0.0001941736677337349)]
        BufferInfo bufferInfo = getBufferInfo();
// bufferInfo           No	: [('resources', 0.00015820651757585103), ('junit', 0.00014546961111569208), ('srcDir', 0.00011659928980599843), ('separator', 0.00011405190851396664), ('expected', 0.00010980627302724698), ('values', 9.36728581777123e-05), ('os', 8.348333300958514e-05), ('token', 7.584118913348976e-05), ('entries', 7.499206203614585e-05), ('localFile', 6.225515557598687e-05)]
        while (remaining > 0) {
// remaining            No	: [('ch', 0.09084422361193446), ('line', 0.06690028224882133), ('b', 0.03300061855999751), ('found', 0.03294771958249552), ('e', 0.030216610201417197), ('c', 0.030199118498449796), ('entries', 0.02990406136420701), ('expectedByte', 0.029900694170834952), ('teststr', 0.029900641100391367), ('value', 0.015088778373372648)]
            while (remaining > 0 && b[offset] != LF && b[offset] != CR) {
// remaining            1	: [('windowStart', 0.27711156992151265), ('remaining', 0.13874181723510473), ('numEOL', 0.13837177637578726), ('bsLiveShadow', 0.05550850733816725), ('ch', 0.028079428969410573), ('e', 0.013872566892308386), ('error', 0.0133934006238654), ('slowScanning', 0.013371802911009052), ('tok', 0.0033163542928256393), ('buildRule', 0.0003094657106501729)]
// b                    0	: [('b', 0.38198111623015574), ('c', 0.01600826665422788), ('data', 0.013910174748907515), ('size', 0.008227082876443317), ('s', 0.007005588574172348), ('type', 0.006975994932349847), ('sb', 0.006959217802652881), ('cons', 0.006952583997204881), ('pathStartsWithFileSeparator', 0.006952371715430545), ('file', 0.0019480917641590773)]
// offset               0	: [('offset', 0.9067319837734422), ('i', 0.015796096983727092), ('off', 0.006300973379475819), ('j', 0.0005361842107542441), ('zz', 0.0002721287418992183), ('index', 0.0002663193651282792), ('i1', 0.0002620737296415596), ('i2', 0.0002614899547621356), ('resources', 1.4600937605024083e-05), ('junit', 4.5459253473653775e-06)]
// LF                   0	: [('LF', 0.441422931231741), ('CR', 0.4414229046965192), ('buffer2', 0.011767317453182399), ('sep', 0.007893617055168656), ('eolString', 0.0039230373726281105), ('extension', 0.0001291454014942833), ('specificationVersion', 0.00012861469705844334), ('implementationVersion', 0.00011265831872681862), ('other', 8.390325345681695e-05), ('implementationVendor', 8.079863250715322e-05)]
// b                    0	: [('b', 0.9375492980483375), ('file', 0.0006980917641590771), ('c', 0.00032644847240969596), ('index', 0.0002633536416368472), ('value', 0.0002535287400493847), ('rc', 0.00024225127078778564), ('out', 0.0002313914955504352), ('other', 0.00022250219625011592), ('name', 0.00020853093053867846), ('args', 0.00018645362600773626)]
// offset               0	: [('offset', 0.9067319837734422), ('i', 0.015796096983727092), ('off', 0.006300973379475819), ('j', 0.0005361842107542441), ('zz', 0.0002721287418992183), ('index', 0.0002663193651282792), ('i1', 0.0002620737296415596), ('i2', 0.0002614899547621356), ('resources', 1.4600937605024083e-05), ('junit', 4.5459253473653775e-06)]
// CR                   1	: [('LF', 0.441422931231741), ('CR', 0.4414229046965192), ('buffer2', 0.011767317453182399), ('sep', 0.007893617055168656), ('eolString', 0.0039230373726281105), ('extension', 0.0001291454014942833), ('specificationVersion', 0.00012861469705844334), ('implementationVersion', 0.00011265831872681862), ('other', 8.390325345681695e-05), ('implementationVendor', 8.079863250715322e-05)]
                offset++;
// offset               0	: [('offset', 0.8750254867582379), ('buildRule', 0.005254919586108914), ('log', 0.002857221812676559), ('thrown', 0.0013502110120258617), ('cmd', 0.000890912680347672), ('out', 0.00047632942347518076), ('project', 0.0004683933282199103), ('sb', 0.00041962236266577445), ('result', 0.0002886363903237246), ('s', 0.00028104542409822535)]
                remaining--;
// remaining            0	: [('remaining', 0.876048796110064), ('mtfFreq', 0.002609529117430868), ('heap', 0.0020929196851305824), ('strIdxStart', 0.0015674300532180516), ('parent', 0.0010565069923787313), ('stack_ll', 0.0010455009417937682), ('fileNames', 0.0010453948009066002), ('countSpaces', 0.0010438666252695003), ('pos', 0.000538052729318604), ('i', 0.0004086646077720928)]
            }
            // either end of buffer or a line separator char
            int blockLength = offset - blockStartOffset;
// blockLength          0	: [('blockLength', 0.5852626945163838), ('zn', 0.17053420905610894), ('result', 0.027142346647113264), ('ch', 0.023868115894335976), ('i', 0.010560650230883638), ('index', 0.010165443876196221), ('count', 0.008179670962160017), ('options', 0.006075201300388903), ('suffixPos', 0.003858103653578789), ('patLength', 0.003858103653578789)]
// offset               0	: [('offset', 0.9375417839725794), ('buildRule', 0.00034461323857431033), ('b', 0.00027770403336197994), ('name', 0.0002733918453328443), ('value', 0.0002547795627662512), ('p', 0.00022522128672252298), ('file', 0.00021156097905690948), ('project', 0.0001941736677337349), ('line', 0.0001729122140289287), ('FILE_UTILS', 0.00016305655465369482)]
// blockStartOffset     0	: [('blockStartOffset', 0.937550381098456), ('start', 0.0005019309676905033), ('WORD', 0.000448533256371073), ('lo', 0.00039842591255385046), ('now', 0.0003980013490051785), ('bsLiveShadow', 0.0003491942310557638), ('n', 0.00030054632443710116), ('s', 0.0002623002247609016), ('index', 0.0002535966720131263), ('ltLo', 0.0002491122195302787)]
            if (blockLength > 0) {
// blockLength          0	: [('blockLength', 0.7500498269199783), ('file', 0.0022924197750860934), ('c', 0.0018724057719143976), ('task', 0.0018134857502747478), ('name', 0.0017643562014646402), ('f', 0.0016820780828562278), ('line', 0.0015508468747664882), ('value', 0.001500196270295952), ('ch', 0.0013656584357818263), ('index', 0.0012927918287435802)]
                bufferInfo.buffer.write(b, blockStartOffset, blockLength);
// bufferInfo           No	: [('buffer', 0.5029469820516765), ('log', 0.05099380705135529), ('result', 0.016234226504253386), ('message', 0.012497895318572025), ('cmd', 0.010732662556511082), ('requestBuilder', 0.009871164049644571), ('sb', 0.00937822183603439), ('writer', 0.007548484894209929), ('redirector', 0.00754438010235012), ('FILE_UTILS', 0.0054026280539660595)]
// buffer               No	: [('ant', 0.044100023225143906), ('junit', 0.014303006474380616), ('types', 0.01196630116801037), ('length', 0.01097675089046964), ('equals', 0.008544843268519793), ('append', 0.007807256219380038), ('add', 0.00746581016288636), ('setValue', 0.007171513862030403), ('getProperty', 0.00707603658436514), ('MSG_VERBOSE', 0.004681714956892941)]
// b                    0	: [('b', 0.28115760223489), ('cc', 0.25178701118949104), ('buffer', 0.030291603276752017), ('root', 0.018263506298127015), ('bsBuffShadow', 0.01600244538603055), ('buf', 0.01292448457853889), ('line', 0.012628058606490166), ('writer', 0.010215209957550382), ('sb', 0.008928899526053271), ('buildRule', 0.0006189314213003458)]
// blockStartOffset     2	: [('off', 0.44499774158495636), ('offset', 0.17421178011849744), ('blockStartOffset', 0.14628242179187886), ('v', 0.013995688926627054), ('name', 0.0049085248670413745), ('count', 0.0046695931486265855), ('currentOffset', 0.004617637088476294), ('buildRule', 0.0004502242235671838), ('l', 0.0003767276278304738), ('e', 0.0003675872386943179)]
// blockLength          0	: [('blockLength', 0.9375026068166734), ('buildRule', 0.0004502242235671838), ('l', 0.0003767276278304738), ('e', 0.0003675872386943179), ('p', 0.00035553001264419695), ('name', 0.0002954296289461363), ('s', 0.0002702313556595122), ('value', 0.000269649618263243), ('result', 0.0002569228992188578), ('offset', 0.0002534467851641061)]
            }
            while (remaining > 0 && (b[offset] == LF || b[offset] == CR)) {
// remaining            No	: [('count', 0.21400950699770624), ('line', 0.10321434207944936), ('reader', 0.04768635001230944), ('i', 0.026406028375725955), ('pos', 0.02431272025939866), ('name', 0.024036059199846756), ('ret', 0.023929431247753853), ('result', 0.023795046593724944), ('entry', 0.023795036864440608), ('sig', 0.02373830070401199)]
// b                    0	: [('b', 0.6153146186925283), ('c', 0.1153737849741798), ('ON_DOS', 0.11525763815551263), ('startIndex', 0.03192589485064017), ('weight', 0.002694648090060122), ('file', 0.0015511472514168022), ('key', 0.0014102373840623411), ('uri', 0.0013864428073883067), ('url', 0.0013725557248913303), ('len', 0.0013616147469621468)]
// offset               0	: [('offset', 0.9067319837734422), ('i', 0.015796096983727092), ('off', 0.006300973379475819), ('j', 0.0005361842107542441), ('zz', 0.0002721287418992183), ('index', 0.0002663193651282792), ('i1', 0.0002620737296415596), ('i2', 0.0002614899547621356), ('resources', 1.4600937605024083e-05), ('junit', 4.5459253473653775e-06)]
// LF                   1	: [('CR', 0.3774587882939224), ('LF', 0.3774407512453291), ('block', 0.024222024653429885), ('quadrant', 0.009688947578933472), ('sep', 0.002586082507724897), ('i', 0.002453946152785058), ('listener', 0.0024413880906521213), ('other', 0.000257276887427018), ('resources', 4.943953674245345e-06), ('junit', 4.5459253473653775e-06)]
// b                    0	: [('b', 0.8437961903955338), ('c', 0.09405158724997967), ('value', 0.0006369296068526026), ('arg', 0.0004425851769178036), ('name', 0.0003590201771323199), ('action', 0.00029495344453167897), ('line', 0.0002658601342528912), ('OS_NAME', 0.00025694429973077996), ('parent', 0.00022689572146748023), ('resources', 4.149366127658452e-05)]
// offset               0	: [('offset', 0.9067319837734422), ('i', 0.015796096983727092), ('off', 0.006300973379475819), ('j', 0.0005361842107542441), ('zz', 0.0002721287418992183), ('index', 0.0002663193651282792), ('i1', 0.0002620737296415596), ('i2', 0.0002614899547621356), ('resources', 1.4600937605024083e-05), ('junit', 4.5459253473653775e-06)]
// CR                   0	: [('CR', 0.3774587882939224), ('LF', 0.3774407512453291), ('block', 0.024222024653429885), ('quadrant', 0.009688947578933472), ('sep', 0.002586082507724897), ('i', 0.002453946152785058), ('listener', 0.0024413880906521213), ('other', 0.000257276887427018), ('resources', 4.943953674245345e-06), ('junit', 4.5459253473653775e-06)]
                write(b[offset]);
// b                    0	: [('b', 0.6102146759952554), ('buf', 0.09645491091097032), ('EMPTY', 0.09491411259940148), ('writer', 0.03583829901592084), ('wBuf', 0.011582395829750824), ('buffer', 0.003721070455580308), ('root', 0.0024113230415366265), ('bsBuffShadow', 0.0019528355962410819), ('name', 0.000515537548640683), ('buildRule', 0.0003094657106501729)]
// offset               0	: [('offset', 0.9067319837734422), ('i', 0.015796096983727092), ('off', 0.006300973379475819), ('j', 0.0005361842107542441), ('zz', 0.0002721287418992183), ('index', 0.0002663193651282792), ('i1', 0.0002620737296415596), ('i2', 0.0002614899547621356), ('resources', 1.4600937605024083e-05), ('junit', 4.5459253473653775e-06)]
                offset++;
// offset               0	: [('offset', 0.7512863093685644), ('s', 0.014085837047180671), ('sb', 0.004847400878343003), ('result', 0.0036428363493823572), ('arg', 0.003417637891354865), ('bb', 0.0033976236703017492), ('i', 0.0027760942923354542), ('m', 0.0024945123038974597), ('t', 0.002425022862992492), ('nestedCreators', 0.002264168974435378)]
                remaining--;
// remaining            0	: [('remaining', 0.876048796110064), ('mtfFreq', 0.002609529117430868), ('heap', 0.0020929196851305824), ('strIdxStart', 0.0015674300532180516), ('parent', 0.0010565069923787313), ('stack_ll', 0.0010455009417937682), ('fileNames', 0.0010453948009066002), ('countSpaces', 0.0010438666252695003), ('pos', 0.000538052729318604), ('i', 0.0004086646077720928)]
            }
            blockStartOffset = offset;
// blockStartOffset     0	: [('blockStartOffset', 0.38236332211161644), ('pos', 0.007404414214189219), ('log', 0.0013587405218906752), ('cmd', 0.00041240433877062766), ('out', 0.00030122101875398546), ('commandLine', 0.00028934589663358274), ('writer', 0.0002610004843218585), ('sb', 0.00024280838397102385), ('result', 0.00015624017760736315), ('buf', 0.00014725590503380481)]
// offset               0	: [('offset', 0.9375417839725794), ('buildRule', 0.00034461323857431033), ('b', 0.00027770403336197994), ('name', 0.0002733918453328443), ('value', 0.0002547795627662512), ('p', 0.00022522128672252298), ('file', 0.00021156097905690948), ('project', 0.0001941736677337349), ('line', 0.0001729122140289287), ('FILE_UTILS', 0.00016305655465369482)]
        }
    }
}
